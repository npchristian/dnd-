/**********5e Character creation and modificaiton module*********/

/*********** LIBRARIES ***********/

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include <stdbool.h>
#include <time.h>

/*********** GLOBAL VARIABLES ***********/
#define SIZE 50

/*********** DATA STRUCTURES ***********/
typedef struct {
	/*********** BASIC CHARACTER INFO***********/
	char name[SIZE];        //stores character name 
	char racename[SIZE];	//
	char subracename[SIZE]; //stores race & sub_race

	int level;              //stores character level
	int race;               //stores character race
	int subrace;
	int sub_class;          //stores int of sub_class

	/*********** CHARACTER STATS***********/
	int charisma;           //stores character charism
	int char_mod;           //stores character charisma mod
	int constitution;       //stores character constitution
	int con_mod;            //stores character constitution mod
	int dexterity;          //stores character dexterity
	int dex_mod;            //stores character dexterity mod
	int intelligence;       //stores character intelligence
	int intel_mod;          //stores character intelligence mod
	int strength;           //stores character strength
	int str_mod;            //stores character strength mod
	int wisdom;             //stores character wisdom
	int wis_mod;            //stores character wisdom mod

} Character;

/*********** FUNCTION HEADERS***********/

Character create_Character();							//generic call to create a character
Character get_Abilities(Character new_Char);			//gets the 5 stats for the character

int check_Abilities(Character new_character);           //checks that entered stats are correct
int dice_roll(int sides);                               //roles an n sided dice
int four_d_6_drop_lowest();                             //sorts four dice rolls, drops lowest, and sums remaining 3
int get_assignment(int score);							//used in the point buy process
int get_class(); //ADD CLASSES FROM OTHER BOOKS         //returns the class chosen by user
int get_int(int upper, int lower);						//returns an integer entered by user
int get_race(char myrace[SIZE], char mysubrace[SIZE],
	int* sub_race);							//returns the race chosen by user
int get_Abil_Mods(int stat);                            //returns character stat mod for a given stat
int get_sub_race(int race);                             // get the sub race
int select_race();

void get_String(bool flag, char new_string[],
	char string_type[]);                    //returns a string entered by user
void pause();
void print_class(int class);							//prints the class for user verification
void print_race(int race, int sub_race);				//prints the race and sub-race for user verificatioN
void sort_array(int arr_size, int arr[6]);

/*********** MAIN***********/
int main() {
	Character myCharacter;                                                                  //create a character
	puts("Welcome to the Dungeons and Dragons fifth edition character creation module.");   //welcome message
	myCharacter = create_Character();                                                       //character creation call
	return 0;
}

/*********** FUNCTION DEFINITIONS***********/

Character create_Character() {
	/*********** VARIABLE DECLARATIONS***********/
	Character new_Character;    //newly created character returned

	int choice = 0;		            //stores user decision

	/********** GET THE STATS ******************/
	do {

		/*********** GET NAME ***********/
		if (choice == 0 || choice == 1) {
			printf("Please enter your character's name: ");
			if (choice == 0)
				get_String(true, new_Character.name, "character's name");
			else
				get_String(false, new_Character.name, "character's name"); //consumes newline from previous entries
		}

		/*********** GET LEVEL*********/
		if (choice == 0 || choice == 2) {
			printf("What level will %s be (1-20)? ", new_Character.name);
			new_Character.level = get_int(1, 20);
		}

		/*********** GET RACE*********/
		if (choice == 0 || choice == 3)
			new_Character.race = get_race(new_Character.racename, new_Character.subracename, &new_Character.subrace);

		/*********** GET CLASS*********/
		if (choice == 0 || choice == 4) printf("class selection in development\n");
		//	new_Character.class = get_class();

		/*********** GET ABILITIES ***********/
		if (choice == 0 || choice == 5)
			new_Character = get_Abilities(new_Character);

		/********** PRINT FINAL STATS *******/
		puts("We have finished the character creation process. What would Would you like to do?");
		printf("1.\tChange my name\t(You selected: %s).\n", new_Character.name);
		printf("2.\tChange my level\t(You selected: %d).\n", new_Character.level);
		printf("3.\tChange my race\t(You selected %s with sub race: %s).\n", new_Character.racename, new_Character.subracename);
		printf("4.\tChange my class\t(You selected: TBD).\n");
		printf("5.\tChange my abilities\t(You selected: charisma %d, constitution %d, dexterity %d,intelligence %d, strength %d, wisdom %d).\n", new_Character.charisma, new_Character.constitution, new_Character.dexterity, new_Character.intelligence, new_Character.strength, new_Character.wisdom);
		printf("6.\tI'm done print my character.\n");
		choice = get_int(1, 6);
	} while (choice != 6);

	return new_Character; //return newly created character

} //COMPLETE
Character get_Abilities(Character new_Char) {

	/*********** VARIABLE DECLARATIONS***********/

	bool stats_rolled = false;							//check if stats have already been rolled
	int rolled_stats[6], stats[6];						//stores user stats
	int	reset;											//initialize reset to false
	int count, count2;									//used in for loops
	int temp;											//used to sort highest to lowest
	int points;											//used in the point buy system


	/*********** GET 6 ABILITIES***********/
	do {
		new_Char.charisma = new_Char.constitution = new_Char.dexterity = new_Char.intelligence = new_Char.strength = new_Char.wisdom = 0;
		puts("Which method would you like to use to compute your stats?\nBonuses due to race and other factors will be added later.");
		printf("1.\tRoll for my stats.\n2.\tPoint buy system.\n3.\tUse 15, 14, 13, 12, 10, 8.\n");

		switch (get_int(1, 3)) {
			case 1: {
				puts("We will begin by rolling your stats as if you were level 1.");
				puts("Stat modifiers due to level, race, and other factors will be added later.");
				puts("You may roll your dice (4d6 drop lowest) or the module can roll it for you.");
				puts("How would you like to compute your stats?");
				printf("1.\tI will roll and manually enter my stats\n2.\tRoll my dice for me\n");

				if (get_int(1, 2) == 1) {
					printf("Enter your charisma: ");
					new_Char.charisma = get_int(3, 18);
					printf("Enter your Constitution: ");
					new_Char.constitution = get_int(3, 18);
					printf("Enter your dexterity: ");
					new_Char.dexterity = get_int(3, 18);
					printf("Enter your intelligence: ");
					new_Char.intelligence = get_int(3, 18);
					printf("Enter your strenth: ");
					new_Char.strength = get_int(3, 18);
					printf("Enter your wisdom: ");
					new_Char.wisdom = get_int(3, 18);
				}
				else {
					if (!stats_rolled) {										//if stats have not already been rolled
						srand(time(NULL));										//seed with time and rolla gain
						for (count = 0; count < 6; count++)
							rolled_stats[count] = four_d_6_drop_lowest();
						stats_rolled = true;
					}

					new_Char.charisma = new_Char.constitution = new_Char.dexterity = new_Char.intelligence = new_Char.strength = new_Char.wisdom = 0;

					sort_array(6, rolled_stats);
					puts("We will assign your stats from highest to lowest:");
					count = 0;      //initialize values to zero
					while (count < 6) {
						printf("Where will you assign your %d roll?\n", rolled_stats[count]);
						printf("1.\tCharisma\n2.\tConstitution\n3.\tDexterity\n4.\tIntelligence\n5.\tStrength\n6.\tWisdom\n");
						//prompt user for stat selections

						switch (get_int(1, 6)) {
						case 1:
							if (new_Char.charisma == 0) {
								new_Char.charisma = rolled_stats[count];
								count++;
							}
							else
								printf("Error: charisma already given value: %d.\n", new_Char.charisma);
							break;
						case 2:
							if (new_Char.constitution == 0) {
								new_Char.constitution = rolled_stats[count];
								count++;
							}
							else
								printf("Error: constitution already given value: %d.\n", new_Char.constitution);
							break;
						case 3:
							if (new_Char.dexterity == 0) {
								new_Char.dexterity = rolled_stats[count];
								count++;
							}
							else
								printf("Error: dexterity already given value: %d.\n", new_Char.dexterity);
							break;
						case 4:
							if (new_Char.intelligence == 0) {
								new_Char.intelligence = rolled_stats[count];
								count++;
							}
							else
								printf("Error: intelligence already given value: %d.\n", new_Char.intelligence);
							break;
						case 5:
							if (new_Char.strength == 0) {
								new_Char.strength = rolled_stats[count];
								count++;
							}
							else
								printf("Error: strength already given value: %d.\n", new_Char.strength);
							break;
						case 6:
							if (new_Char.wisdom == 0) {
								new_Char.wisdom = rolled_stats[count];
								count++;
							}
							else
								printf("Error: wisdom already given value: %d.\n", new_Char.wisdom);
							break;
						}
					}
				}
				break; }
			case 2: {
				points = 27;
				count = 0;
				puts("You have a total of 27 points to spend on your ability scores. The cost of each is displayed below.");
				while (count < 6) {
					if (count > 0)
						printf("You have %d points left. What would you like to buy?\n", points);
					printf("SELECTION\tSCORE\tCOST\n1.\t\t9\t0\n2.\t\t9\t1\n3.\t\t10\t2\n4.\t\t11\t3\n5.\t\t12\t4\n6.\t\t13\t5\n7.\t\t14\t7\n8.\t\t15\t9\n");
					switch (get_int(1, 8)) {
					case 1: {
						switch (get_assignment(8)) {
						case 1: {
							if (new_Char.charisma == 0) {
								new_Char.charisma = 8;
								count++;
							}
							else
								printf("Error: charisma was already given the value of %d.\n", new_Char.charisma);
							break; }
						case 2: {
							if (new_Char.constitution == 0) {
								new_Char.constitution = 8;
								count++;
							}
							else
								printf("Error: constitution was already given the value of %d.\n", new_Char.constitution);
							break; }
						case 3: {
							if (new_Char.dexterity == 0) {
								new_Char.dexterity = 8;
								count++;
							}
							else
								printf("Error: dexterity was already given the value of %d.\n", new_Char.dexterity);
							break; }
						case 4: {
							if (new_Char.intelligence == 0) {
								new_Char.intelligence = 8;
								count++;
							}
							else
								printf("Error: intelligence was already given the value of %d.\n", new_Char.intelligence);
							break; }
						case 5: {
							if (new_Char.strength == 0) {
								new_Char.strength = 8;
								count++;
							}
							else
								printf("Error: strength was already given value of %d.\n", new_Char.strength);
							break; }
						case 6: {
							if (new_Char.wisdom == 0) {
								new_Char.wisdom = 8;
								count++;
							}
							else
								printf("Error: wisdom was already given the value of %d.\n", new_Char.wisdom);
							break; }
						}
						break; }
					case 2: {
						if (points < 1)
							puts("Error: a score of 9 costs 1 point. You have no points left.");
						else {
							switch (get_assignment(9)) {
							case 1: {
								if (new_Char.charisma == 0) {
									new_Char.charisma = 9;
									points = points - 1;
									count++;
								}
								else
									printf("Error: charisma was already given the value of %d.\n", new_Char.charisma);
								break; }
							case 2: {
								if (new_Char.constitution == 0) {
									new_Char.constitution = 9;
									points = points - 1;
									count++;
								}
								else
									printf("Error: constitution was already given the value of %d.\n", new_Char.constitution);
								break; }
							case 3: {
								if (new_Char.dexterity == 0) {
									new_Char.dexterity = 9;
									points = points - 1;
									count++;
								}
								else
									printf("Error: dexterity was already given the value of %d.\n", new_Char.dexterity);
								break; }
							case 4: {
								if (new_Char.intelligence == 0) {
									new_Char.intelligence = 9;
									points = points - 1;
									count++;
								}
								else
									printf("Error: intelligence was already given the value: %d.\n", new_Char.intelligence);
								break; }
							case 5: {
								if (new_Char.strength == 0) {
									new_Char.strength = 9;
									points = points - 1;
									count++;
								}
								else
									printf("Error: strength was already given the value of %d.\n", new_Char.strength);
								break; }
							case 6: {
								if (new_Char.wisdom == 0) {
									new_Char.wisdom = 9;
									points = points - 1;
									count++;
								}
								else
									printf("Error: wisdom was already given the valueof %d.\n", new_Char.wisdom);
								break; }
							}
							break;
						}
						break; }
					case 3: {
						if (points < 2)
							printf("Error: a score of 10 costs 2 points. You only have %d points.\n", points);
						else {
							switch (get_assignment(10)) {
							case 1: {
								if (new_Char.charisma == 0) {
									new_Char.charisma = 10;
									points = points - 2;
									count++;
								}
								else
									printf("Error: charisma was already given the value of %d.\n", new_Char.charisma);
								break; }
							case 2: {
								if (new_Char.constitution == 0) {
									new_Char.constitution = 10;
									points = points - 2;
									count++;
								}
								else
									printf("Error: constitution was already given the value of %d.\n", new_Char.constitution);
								break; }
							case 3: {
								if (new_Char.dexterity == 0) {
									new_Char.dexterity = 10;
									points = points - 2;
									count++;
								}
								else
									printf("Error: dexterity was already given the value: %d.\n", new_Char.dexterity);
								break; }
							case 4: {
								if (new_Char.intelligence == 0) {
									new_Char.intelligence = 10;
									points = points - 2;
									count++;
								}
								else
									printf("Error: intelligence was already given the value of %d.\n", new_Char.intelligence);
								break; }
							case 5: {
								if (new_Char.strength == 0) {
									new_Char.strength = 10;
									points = points - 2;
									count++;
								}
								else
									printf("Error: strength was already given the value of %d.\n", new_Char.strength);
								break; }
							case 6: {
								if (new_Char.wisdom == 0) {
									new_Char.wisdom = 10;
									points = points - 2;
									count++;
								}
								else
									printf("Error: wisdom was already given the value of %d.\n", new_Char.wisdom);
								break; }
							}
						}
						break; }
					case 4: {
						if (points < 3)
							printf("Error: a score of 11 costs 3 points. You only have %d points.\n", points);
						else {
							switch (get_assignment(11)) {
							case 1: {
								if (new_Char.charisma == 0) {
									new_Char.charisma = 11;
									points = points - 3;
									count++;
								}
								else
									printf("Error: charisma was already given the value of %d.\n", new_Char.charisma);
								break; }
							case 2: {
								if (new_Char.constitution == 0) {
									new_Char.constitution = 11;
									points = points - 3;
									count++;
								}
								else
									printf("Error: constitution was already given the value: %d.\n", new_Char.constitution);
								break; }
							case 3: {
								if (new_Char.dexterity == 0) {
									new_Char.dexterity = 11;
									points = points - 3;
									count++;
								}
								else
									printf("Error: dexterity was already given the value of %d.\n", new_Char.dexterity);
								break; }
							case 4: {
								if (new_Char.intelligence == 0) {
									new_Char.intelligence = 11;
									points = points - 3;
									count++;
								}
								else
									printf("Error: intelligence was already given the value of %d.\n", new_Char.intelligence);
								break; }
							case 5: {
								if (new_Char.strength == 0) {
									new_Char.strength = 11;
									points = points - 3;
									count++;
								}
								else
									printf("Error: strength was already given the value of %d.\n", new_Char.strength);
								break; }
							case 6: {
								if (new_Char.wisdom == 0) {
									new_Char.wisdom = 11;
									points = points - 3;
									count++;
								}
								else
									printf("Error: wisdom was already given the value of %d.\n", new_Char.wisdom);
								break; }
							}
						}
						break; }
					case 5: {
						if (points < 4)
							printf("Error: a score of 12 costs 4 points. You only have %d points.\n", points);
						else {
							switch (get_assignment(12)) {
							case 1: {
								if (new_Char.charisma == 0) {
									new_Char.charisma = 12;
									points = points - 4;
									count++;
								}
								else
									printf("Error: charisma was already given the value of %d.\n", new_Char.charisma);
								break; }
							case 2: {
								if (new_Char.constitution == 0) {
									new_Char.constitution = 12;
									points = points - 4;
									count++;
								}
								else
									printf("Error: constitution was already given the value of %d.\n", new_Char.constitution);
								break; }
							case 3: {
								if (new_Char.dexterity == 0) {
									new_Char.dexterity = 12;
									points = points - 4;
									count++;
								}
								else
									printf("Error: dexterity was already given the value of %d.\n", new_Char.dexterity);
								break; }
							case 4: {
								if (new_Char.intelligence == 0) {
									new_Char.intelligence = 12;
									points = points - 4;
									count++;
								}
								else
									printf("Error: intelligence was already given the value of %d.\n", new_Char.intelligence);
								break; }
							case 5: {
								if (new_Char.strength == 0) {
									new_Char.strength = 12;
									points = points - 4;
									count++;
								}
								else
									printf("Error: strength was already given the value of %d.\n", new_Char.strength);
								break; }
							case 6: {
								if (new_Char.wisdom == 0) {
									new_Char.wisdom = 12;
									points = points - 4;						points = points - 4;
									count++;
								}
								else
									printf("Error: wisdom was already given the value of %d.\n", new_Char.wisdom);
								break; }
							}
						}
						break; }
					case 6: {
						if (points < 5)
							printf("Error: a score of 13 costs 5 points. You only have %d points.\n", points);
						else {
							switch (get_assignment(13)) {
							case 1: {
								if (new_Char.charisma == 0) {
									new_Char.charisma = 13;
									points = points - 5;
									count++;
								}
								else
									printf("Error: charisma was already given the value of %d.\n", new_Char.charisma);
								break; }
							case 2: {
								if (new_Char.constitution == 0) {
									new_Char.constitution = 13;
									points = points - 5;
									count++;
								}
								else
									printf("Error: constitution was already given the value of %d.\n", new_Char.constitution);
								break; }
							case 3: {
								if (new_Char.dexterity == 0) {
									new_Char.dexterity = 13;
									points = points - 5;
									count++;
								}
								else
									printf("Error: dexterity was already given the value of %d.\n", new_Char.dexterity);
								break; }
							case 4: {
								if (new_Char.intelligence == 0) {
									new_Char.intelligence = 13;
									points = points - 5;
									count++;
								}
								else
									printf("Error: intelligence was already given the value of %d.\n", new_Char.intelligence);
								break; }
							case 5: {
								if (new_Char.strength == 0) {
									new_Char.strength = 13;
									points = points - 5;
									count++;
								}
								else
									printf("Error: strength was already given the value of %d.\n", new_Char.strength);
								break; }
							case 6: {
								if (new_Char.wisdom == 0) {
									new_Char.wisdom = 13;
									points = points - 5;
									count++;
								}
								else
									printf("Error: wisdom was already given the value: %d.\n", new_Char.wisdom);
								break; }
							}
						}
						break; }
					case 7: {
						if (points < 7)
							printf("Error: a score of 14 costs 7 points. You only have %d points.\n", points);
						else {
							switch (get_assignment(14)) {
							case 1: {
								if (new_Char.charisma == 0) {
									new_Char.charisma = 14;
									points = points - 7;
									count++;
								}
								else
									printf("Error: charisma was already given the value of %d.\n", new_Char.charisma);
								break; }
							case 2: {
								if (new_Char.constitution == 0) {
									new_Char.constitution = 14;
									points = points - 7;
									count++;
								}
								else
									printf("Error: constitution was already given the value of %d.\n", new_Char.constitution);
								break; }
							case 3: {
								if (new_Char.dexterity == 0) {
									new_Char.dexterity = 14;
									points = points - 7;
									count++;
								}
								else
									printf("Error: dexterity was already given the value of  %d.\n", new_Char.dexterity);
								break; }
							case 4: {
								if (new_Char.intelligence == 0) {
									new_Char.intelligence = 14;
									points = points - 7;
									count++;
								}
								else
									printf("Error: intelligence was already given the value of %d.\n", new_Char.intelligence);
								break; }
							case 5: {
								if (new_Char.strength == 0) {
									new_Char.strength = 14;
									points = points - 7;
									count++;
								}
								else
									printf("Error: strength was already given the value of %d.\n", new_Char.strength);
								break; }
							case 6: {
								if (new_Char.wisdom == 0) {
									new_Char.wisdom = 14;
									points = points - 7;
									count++;
								}
								else
									printf("Error: wisdom was already given the value of %d.\n", new_Char.wisdom);
								break; }
							}
						}
						break; }
					case 8: {
						if (points < 9)
							printf("Error: a score of 15 costs 9 points. You only have %d points.\n", points);
						else {
							switch (get_assignment(15)) {
							case 1: {
								if (new_Char.charisma == 0) {
									new_Char.charisma = 15;
									points = points - 9;
									count++;
								}
								else
									printf("Error: charisma was already given the value of %d.\n", new_Char.charisma);
								break; }
							case 2: {
								if (new_Char.constitution == 0) {
									new_Char.constitution = 15;
									points = points - 9;
									count++;
								}
								else
									printf("Error: constitution was already given the value of %d.\n", new_Char.constitution);
								break; }
							case 3: {
								if (new_Char.dexterity == 0) {
									new_Char.dexterity = 15;
									points = points - 9;
									count++;
								}
								else
									printf("Error: dexterity was already given the value of %d.\n", new_Char.dexterity);
								break; }
							case 4: {
								if (new_Char.intelligence == 0) {
									new_Char.intelligence = 15;
									points = points - 9;
									count++;
								}
								else
									printf("Error: intelligence was already given the value of %d.\n", new_Char.intelligence);
								break; }
							case 5: {
								if (new_Char.strength == 0) {
									new_Char.strength = 15;
									points = points - 9;
									count++;
								}
								else
									printf("Error: strength was already given the value of %d.\n", new_Char.strength);
								break; }
							case 6: {
								if (new_Char.wisdom == 0) {
									new_Char.wisdom = 15;
									points = points - 9;
									count++;
								}
								else
									printf("Error: wisdom was already given the value of %d.\n", new_Char.wisdom);
								break; }
							}
						}
						break; }
					}
				} //end while count<6
				break; }
			case 3: {
			count = 0;
			stats[0] = 15; stats[1] = 14; stats[2] = 13; stats[3] = 12; stats[4] = 10; stats[5] = 8;
			while (count < 6) {
				printf("Where will you assign the %d?\n", stats[count]);
				printf("1.\tCharisma.\n2.\tConstitution.\n3.\tDexterity.\n4.\tIntelligence.\n5.\tStrength.\n6.\tWisdom.\n");

				switch (get_int(1, 6)) {
				case 1: {
					if (new_Char.charisma == 0) {
						new_Char.charisma = stats[count];
						count++;
					}
					else
						printf("Error: charisma was already given the value of %d.\n", new_Char.charisma);
					break; }
				case 2: {
					if (new_Char.constitution == 0) {
						new_Char.constitution = stats[count];
						count++;
					}
					else
						printf("Error: constitution was already given the value of %d.\n", new_Char.constitution);
					break; }
				case 3: {
					if (new_Char.dexterity == 0) {
						new_Char.dexterity = stats[count];
						count++;
					}
					else
						printf("Error: dexterity was already given the value of %d.\n", new_Char.dexterity);
					break; }
				case 4: {
					if (new_Char.intelligence == 0) {
						new_Char.intelligence = stats[count];
						count++;
					}
					else
						printf("Error: intelligence was already given the value of %d.\n", new_Char.intelligence);
					break; }
				case 5: {
					if (new_Char.strength == 0) {
						new_Char.strength = stats[count];
						count++;
					}
					else
						printf("Error: strength was already given the value of %d.\n", new_Char.strength);
					break; }
				case 6: {
					if (new_Char.wisdom == 0) {
						new_Char.wisdom = stats[count];
						count++;
					}
					else
						printf("Error: wisdom was already given the value of %d.\n", new_Char.wisdom);
					break; }
				}
			}
			break;
		}
		}
		reset = check_Abilities(new_Char);
	} while (reset == 2);


	return new_Char; //return the new character & stats.
} //COMPLETE

int check_Abilities(Character new_character) {
	printf("%s's stats are:\n", new_character.name);
	printf("Charisma:\t%d\n", new_character.charisma);
	printf("Constitution:\t%d\n", new_character.constitution);
	printf("Dexterity:\t%d\n", new_character.dexterity);
	printf("Intelligence:\t%d\n", new_character.intelligence);
	printf("Strength:\t%d\n", new_character.strength);
	printf("Wisdom:\t\t%d\n", new_character.wisdom);
	printf("Is this correct?\n1.\tYes.\n2.\tNo\n");
	return (get_int(1, 2));  //print stats, ask if they are correct, and return the answer
} //COMPLETE
int dice_roll(int sides) {
	return (1 + rand() % (sides + 1 - 1));
} //COMPLETE
int get_assignment(int score) {
	printf("Where will you assign your %d?\n", score);
	printf("1.\tCharisma.\n2.\tConstitution.\n3.\tDexterity.\n4.\tIntelligence.\n5.\tStrength.\n6.\tWisdom.\n");
	return(get_int(1, 6));
} //COMPLETE
int get_class() {
	/*********** GET CLASS ***********/
	puts("What class will you play?");
	printf("1.\tBarbarian\n2.\tBard\n3.\tCleric\n4.\tDruid\n5.\tFighter\n");
	printf("6.\tMonk\n7.\tPaladin\n8.\tRanger\n9.\tSorcerer\n10.\tWarlock\n11.\tWizard\n");
	return (get_int(1, 11));
} //add classes from other resources & more information
//int get_class_name(int class) //implent this
int get_int(int lower, int upper) {
	int choice;
	char junk;
	bool flag = true;

	while (flag) {
		if (scanf("%d", &choice))
			if (choice > upper || choice < lower)
				printf("It looks like you enered a number to high or too low. Choose an option from %d to %d.\n", lower, upper);
			else
			{
				printf("\n");
				flag = false;
			}
		else
		{
			scanf("%c", &junk); //consumes the char mistakenly entered
			printf("It looks like you accidentally entered a non-number. Try again)\n");
		}
	}
	scanf("%c", &junk);//consumes newline
	return choice;
} //COMPLETE
int get_race(char myrace[SIZE], char mysubrace[SIZE], int* sub_race) {

	/*********** FUNCTION INFORMATION***********
	* PRINTS LIST OF RACES, USER SELECTS OR ASKS FOR MORE INFO
	* PRINTS MORE INFORMATION IN LOOP UNTIL USER IS READY
	*

	* RETURNS AN INTEGER CORRESPONDING TO THAT RACE AND SETS THE RACE NAME TO AN ARRAY PASSED TO FUNCTION

	* DO 1: LOOPS UNTIL USER SELECTS THE "IM READY" OPTION
	* SWITCH 1: PRINTS INFORMATION BASED ON USER CHOICE (INFO ON RACES)


	/*********** VARIABLE DECLARATIONS***********/
	int choice_race, choice_info, choice_sub; //used to read user input
	bool choice_made;

	/*********** GET RACE ***********/
	do {
		choice_info = 0;
		choice_made = false;

		{printf("What race would you like to play? (Races marked with an * may not be allowed consult your DM)\n");
		printf("1.\t*Aarakocra\t16.\tHalf-Orc\n2.\t*Aasimar\t17.\tHuman\n3.\t*Bugbear\t18.\t*Human, Variant\n4.\t*Changeling\t19.\t*Kenku\n5.\tDragonborn");
		printf("\t20.\t*Kobold\n6.\tDwarf\t\t21.\t*Lizardfolk\n7.\tElf\t\t22.\t*Minotaur\n8\t*Firbolg\t23.\t*Orc\n9.\t*Genasi\t\t24.\t*Shifter\n10.\tGnome");
		printf("\t\t25.\t*Tabaxi\n11.\t*Goblin\t\t26.\tTiefling\n12.\t*Goliath\t27.\t*triton\n13.\t*Hobgoblin\t28.\t*Warforged\n14.\tHalf-Elf\t29.\tYuan-ti Pureblood\n");
		printf("15.\tHalfling\t30.\tI need more info\n");

		choice_race = get_int(1, 30); }

		while (choice_race == 30 && choice_info != 7) {
			{puts("What would you like to know more about?");
			printf("1.\tWhat effect does each race have on abilities? (strength, dexterity, etc.)\n");
			printf("2.\tWhat about racial properties? (age, size, speed, etc.)\n");
			printf("3.\tWhat cantrips, feats, and spells does each race have\n");
			printf("4.\tWhat Languages do they speak?\n");
			printf("5.\tWhat about special features like attacks, breath weapon, etc.?\n");
			printf("6.\tWhere can I find more information?\n");
			printf("7.\tI'm ready to choose!\n");
			choice_info = get_int(1, 7); }

			switch (choice_info) {
			case 1: {
				printf("\t\t\tCHA\tCON\tDEX\tINT\tSTR\tWIS\n");
				printf("Aarakocra\t\t0\t0\t+2\t0\t0\t1\n");
				printf("Aasimar, Fallen\t\t0\t0\t0\t0\t+1\t0\n");
				printf("Aasimar, Protector\t0\t0\t0\t0\t0\t+1\n");
				printf("Aasimar, Revenant\t0\t+1\t0\t0\t0\t0\n");
				printf("Aasimar, Scourge\t0\t+1\t0\t0\t0\t0\n");
				printf("Bugbear\t\t\t0\t0\t+1\t0\t+2\t0\n");
				printf("Changeling\t\t+1\t0\t+1\t0\t0\t0\n");
				printf("Dragonborn\t\t+1\t0\t0\t0\t+2\t0\n");
				printf("Dragonborn, Revenant\t+1\t0\t0\t0\t+1\t0\n");
				printf("Dwarf, Gold\t\t0\t+2\t0\t0\t0\t+1\n");
				printf("Dwarf, Gray\t\t0\t+2\t0\t0\t+1\t0\n");
				printf("Dwarf, Hill\t\t0\t+2\t0\t0\t0\t+1\n");
				printf("Dwarf, Mountain\t\t0\t+2\t0\t0\t+2\t0\n");
				printf("Dwarf, Revenant\t\t0\t+1\t0\t0\t0\t0\n");
				printf("Dwarf, Shield\t\t0\t+2\t0\t0\t+2\t0\n");
				printf("Elf, Dark\t\t+1\t0\t+2\t0\t0\t0\n");
				printf("Elf, High\t\t0\t0\t+2\t+1\t0\t0\n");
				printf("Elf, Moon\t\t0\t0\t+2\t+1\t0\t0\n");
				pause();
				printf("\t\t\tCHA\tCON\tDEX\tINT\tSTR\tWIS\n");
				printf("Elf, Revenant\t\t0\t1\t0\t0\t0\t0\n");
				printf("Elf, Sun\t\t0\t0\t+2\t+1\t0\t0\n");
				printf("Elf, Wood\t\t0\t0\t+2\t0\t0\t+1\n");
				printf("Firbolg\t\t\t0\t0\t0\t0\t+1\t+2\n");
				printf("Genasi, Air\t\t0\t+2\t+1\t0\t0\t0\n");
				printf("Genasi, Earth\t\t0\t+2\t0\t0\t+1\t0\n");
				printf("Genasi, Fire\t\t0\t+2\t0\t+1\t0\t0\n");
				printf("Genasi, Revenant\t0\t+1\t0\t0\t0\t0\n");
				printf("Genasi, Water\t\t0\t+2\t0\t0\t0\t+1\n");
				printf("Gnome, Deep\t\t0\t0\t+1\t+2\t0\t0\n");
				printf("Gnome, Forest\t\t0\t0\t+1\t+2\t0\t0\n");
				printf("Gnome, Revenant\t\t0\t+1\t0\t0\t0\t0\n");
				printf("Gnome, Rock\t\t0\t+1\t0\t+2\t0\t0\n");
				printf("Gnome, Svirfneblin\t0\t0\t0\t+2\t0\t0\n");
				printf("Goblin\t\t\t0\t+1\t+2\t0\t0\t0\n");
				printf("Goliath\t\t\t0\t+1\t0\t0\t+2\t0\n");
				printf("Half-Elf\t\t+2\t0\t0\t0\t0\t0 (Pick 2 more to increase by 1)\n");
				pause();
				printf("\t\t\tCHA\tCON\tDEX\tINT\tSTR\tWIS\n");
				printf("Halfling, Lightfoot\t+1\t0\t+2\t0\t0\t0\n");
				printf("Halfling, Stout\t\t0\t+1\t+2\t0\t0\t0\n");
				printf("Halfling, Strongheart\t0\t+1\t+2\t0\t0\t0\n");
				printf("Halfling, Revenant\t0\t+1\t0\t0\t0\t0\n");
				printf("Half-Elf\t\t2\t0\t0\t0\t0\t0 (pick 2 more to increase by 1)\n");
				printf("Half-Orc\t\t0\t+1\t0\t0\t+2\t0\n");
				printf("Hobgoblin\t\t0\t+2\t0\t+1\t0\t0\n");
				printf("Human\t\t\t+1\t+1\t+1\t+1\t+1\t+1\n");
				printf("Human, Revenant\t\t0\t0\t0\t0\t0\t0 (pick 2 to increase by 1)\n");
				printf("Human, Variant\t\t0\t0\t0\t0\t0\t0 (pick 2 to increase by 1)\n");
				printf("Kenku\t\t\t0\t0\t+2\t0\t0\t+1\n");
				printf("Kobold\t\t\t0\t0\t+2\t0\t-2\t0\n");
				printf("Lizardfolk\t\t0\t+2\t0\t0\t0\t+1\n");
				printf("Minotaur\t\t0\t0\t0\t0\t+1\t0 (pick int, str, or wis to increase by 1\n");
				printf("Orc\t\t\t0\t+1\t0\t-2\t+2\t0\n");
				printf("Shifter, Beasthide\t0\t+1\t+1\t0\t0\t0\n");
				printf("Shifter, Cliffwalk\t0\t0\t+2\t0\t0\t0\n");
				printf("Shifter, Longstride\t0\t0\t+2\t0\t0\t0\n");
				printf("Shifter, Longtooth\t0\t0\t+1\t0\t+1\t0\n");
				pause();
				printf("\t\t\tCHA\tCON\tDEX\tINT\tSTR\tWIS\n");
				printf("Shifter, Razorclaw\t0\t0\t+2\t0\t0\t0\n");
				printf("Shifter, Revenant\t0\t+1\t0\t0\t0\t0\n");
				printf("Shifter, Wildhunt\t0\t0\t+1\t0\t0\t+1\n");
				printf("Tabaxi\t\t\t+1\t0\t+2\t0\t0\t0\n");
				printf("Tiefling\t\t+2\t0\t0\t+1\t0\t0\n");
				printf("Tiefling, Abyssal\t0\t+2\t0\t0\t0\t0\n");
				printf("Tiefling, Infernal\t0\t+1\t0\t+1\t0\t0\n");
				printf("Triton\t\t\t+1\t+1\t0\t0\t+1\t0\n");
				printf("Warforged\t\t0\t+1\t0\t0\t+1\t0\n");
				printf("Yuan-Ti Pureblood\t+2\t0\t0\t+1\t0\t0\n");
				pause();
				break; } //end case 1 race abilities
			case 2: {
				printf("RACE\t\t\tAGE\tALIGMENT\tSIZE\tSPEED\t\tDARKVISION\n");
				printf("Aarakocra\t\t3-30\tvaries\t\tmedium\t25, 50(fly)\tno\n");
				printf("Aasimar\t\t\t18-160\tvaries\t\tmedium\t30\t\tyes\n");
				printf("Bugbear\t\t\t16-80\tvaries\t\tmedium\t30\t\tyes\n");
				printf("Changeling\t\tN/A\tvaries\t\tmedium\t30\t\tno\n");
				printf("Dragonborn\t\t15-80\tvaries\t\tmedium\t30\t\tno\n");
				printf("Dwarf, all\t\t18-350\tvaries\t\tmedium\t25\t\tyes\n");
				printf("Dwarf, Gray\t\t18-350\tvaries\t\tmedium\t25\t\tsuperior\n");
				printf("Elf, all\t\t100-350\tvaries\t\tmedium\t30\t\tyes\n");
				printf("Elf, Dark\t\t100-350\tvaries\t\tmedium\t30\t\tsuperior\n");
				printf("Firbolg\t\t\t50-500\tvaries\t\tmedium\t30\t\tno\n");
				printf("Genasi, all\t\t18-120\tvaries\t\tmedium\t30\t\tno\n");
				printf("Genasi, Fire\t\t18-120\tvaries\t\tmedium\t30\t\tyes\n");
				printf("Genasi, Water\t\t18-120\tvaries\t\tmedium\t30, 30 (swim)\tno\n");
				printf("Gnome, all\t\t18-500\tvaries\t\tsmall\t25\t\tyes\n");
				printf("Gnome, Deep\t\t18-250\tvaries\t\tsmall\t25\t\tsuperior\n");
				printf("Gnome, Svifneblin\t18-500\tvaries\t\tsmall\t25\t\tsuperior\n");
				printf("Goblin\t\t\t8-60\tvaries\t\tsmall\t30\t\tyes\n");
				printf("Goliath\t\t\t18-70\tvaries\t\tmedium\t30\t\tno\n");
				printf("Halfling\t\t20-250\tvaries\t\tsmall\t25\t\tno\n");
				pause();
				printf("RACE\t\t\tAGE\tALIGMENT\tSIZE\tSPEED\t\tDARKVISION\n");
				printf("Half-Elf\t\t20-180\tvaries\t\tmedium\t30\t\tyes\n");
				printf("Half-Orc\t\t40-75\tvaries\t\tmedium\t30\t\tyes\n");
				printf("Hobgoblin\t\t19-75\tvaries\t\tmedium\t30\t\tyes\n");
				printf("Human\t\t\t18-75\tvaries\t\tmedium\t30\t\tno\n");
				printf("Kenku\t\t\t12-60\tvaries\t\tmedium\t30\t\tno\n");
				printf("Kobold\t\t\t6-120\tvaries\t\tsmall\t30\t\tyes\n");
				printf("Lizardfolk\t\t14-60\tvaries\t\tmedium\t30\t\tno\n");
				printf("Orc\t\t\t12-50\tvaries\t\tmedium\t30\t\tyes\n");
				printf("Tabaxi\t\t\t18-75\tvaries\t\tmedium\t30, 20 (climb)\tyes\n");
				printf("Tiefling\t\t18-80\tvaries\t\tmedium\t30\t\tyes\n");
				printf("Triton\t\t\t15-200\tvaries\t\tmedium\t30, 30 (swim)\tno\n");
				printf("Warforged\t\tN/A\tvaries\t\tmedium\t30\t\tno\n");
				printf("Yuan-Ti Pureblood\t18-75\tvaries\t\tmedium\t30\t\tyes\n");
			break;}
			case 3: {
				printf("RACE/SUBRACE\t\tPROPERTY\n");
				printf("Aasimar\t\tLight Cantrip\n");
				printf("Dwarf, Gray\tEnlarge/Reduce (at level 3) (self only) (can't cast in sunlight)\n");
				printf("Dwarf, Gray\tInvisibility (at level 5) (self only) (can't cast in sunlight)\n");
				printf("Elf, Dark\tDancing Lights\n");
				printf("Elf, Dark\tFaerie Fire\n");
				printf("Elf, Dark\tDarkness\n");
				printf("Elf, High\tchoose one cantrip from the Wizard's spell list\n");
				printf("Firbolg\t\tDetect Magic\n");
				printf("Firbolg\t\tDisguise Self\n");
				printf("Genasi, Air\tLevitate\n");
				printf("Geansi, Earth\tPass Without Trace\n");
				printf("Genasi, Fire\tBurning Hands (at level 3)\n");
				printf("Genasi, Fire\tProduce Flame\n");
				printf("Genasi, Water\tShape Water\n");
				printf("Genasi, Water\tCreate or Destroy Water (at level 3)\n");
				printf("Gnome, Forest\tMinor Illusion\n");
				printf("Human, Variant\tone feat of your choice\n");
				printf("Tiefling\tThaumaturgy\n");
				printf("Tiefling\tHellish Rebuke (at level 3) (spell level 2)\n");
				printf("Tiefling\tDarkness (at level 5)\n");
				pause();
				printf("RACE/SUBRACE\t\tPROPERTY\n");
				printf("Tiefling, Abyssal\tRandom Cantrips and Spells from Codex: Unearthed Arcana page 10\n");
				printf("Tiefling, Infernal\tThaumaturgy\n");
				printf("Tiefling, Infernal\tHellish Rebuke  (at level 3) (spell level 2)\n");
				printf("Tiefling, Infernal\tDarkness (at level 5)\n");
				printf("Triton\t\t\tControl Air and Water cast one per long rest:\n");
				printf("\t\t\t- Fog cloud\n\t\t\t- Gust of Wind(at level 3)\n\t\t\t- Wall of Water (at level 5)\n");
				printf("Yuan-ti Pureblood\tPoison Spray\n");
				printf("Yuan-ti Pureblood\tAnimal Friendship\n");
				printf("Yuan-ti Pureblood\tSuggestion\n\n");
				break; }
			case 4: {
				printf("RACE\t\t\tLANGUAGES\n");
				printf("Aarakocra\t\tCommon, Aarakocra, and Auran\n");
				printf("Aasimar,all\t\tCommon and Celestial\n");
				printf("Bugbear\t\t\tCommon and Goblin\n");
				printf("Changeling\t\tCommon and two other languages of your choice\n");
				printf("Dragonborn\t\tCommon and Draconic\n");
				printf("Dwarf, all\t\tCommon, and Dwarf\n");
				printf("Dwarf, all\t\tCommon, Dwarf, and Undercommon\n");
				printf("Elf, all\t\tCommon, and Elvish\n");
				printf("Elf, High\t\tCommon, Elvish, and one other language of your choice\n");
				printf("Firbolg\t\t\tCommon, Elvish, and Giant\n");
				printf("Genasi\t\t\tCommon and Primordial\n");
				printf("Gnome, all\t\tCommon and Gnomish\n");
				printf("Gnome, Svirfneblin\t\Common, Gnomish, and Undercommon\n");
				printf("Goblin\t\t\tCommon and Goblin\n");
				printf("Goliath\t\t\tCommon and Giant\n");
				printf("Halfling\t\tCommon and Halfling\n");
				printf("Half-Elf\t\tCommon, Elvish, and one other of your choice\n");
				printf("Half-Orc\t\tCommon and Orc\n");
				printf("Hobgoblin\t\tCommon and Goblin\n");
				pause();
				printf("RACE\t\t\tLANGUAGES\n");
				printf("Human, all\t\tCommon and one other language of your choice\n");
				printf("Kenku\t\t\tCommon and Auran\n");
				printf("Kobold\t\t\tCommon and Draconic\n");
				printf("Lizardfolk\t\tCommon and Draconic\n");
				printf("Orc\t\t\tCommon and Orc\n");
				printf("Tabaxi\t\t\tCommon and one other language of your choice\n");
				printf("Tiefling\t\tCommon and Infernal\n");
				printf("Tiefling, Abyssal\tCommon and Abyssal\n");
				printf("Tiefling, Infernal\tCommon and Infernal\n");
				printf("Triton\t\t\tCommon and Primordial\n");
				printf("Yuan-ti Pureblood\tCommon, Abyssal, and Draconic\n");
				break;
			}
			case 5: {
				printf("RACE\tPROPERTY\n");
				printf("Aarakocra\tProficient: unarmed strikes & strikes deal 1d4 damage\n");
				printf("Aasimar, all\tresistance: necrotic & radiant damage\n");
				printf("Aasimar, all\theal for HP equal to your level once per long rest\n");
				printf("Aasimar, Protector\ttemporary flight and add radiant damage equal to level (at level 3)\n");
				printf("Aasimar, Scourge\tshed light & deal radiant damage to everyone nearby (at leel 3)\n");
				printf("Aasimar, Fallen\tnearby creatures who fail their save become afraid of you & add necrotic damage (at level 3)\n");
				printf("Bugbear\twhen you make a melee attack your reach is 5ft greater than normal\n");
				printf("Bugbear\tyou count as large when determining your carrying capacity and weight you can move\n");
				printf("Bugbear\tproficient in stealth\n");
				printf("Bugbear\tif you suprise a creature and hit it on your first turn you deal an extra 2d6 damage\n");
				printf("Changeling\tproficient in the deception skill\n");
				printf("Changeling\tpolymorph into a humanoid of your size that you have seen\n");
				printf("Dragonborn\tchoose one draconic ancestry from page 34 of the Player's Handbook\n");
				printf("Dragonborn\texhale destructive energy based on your ancestry to deal damage \n");
				printf("Dragonborn\tresistance to the damage type associated with your Draconic Ancestry\n");
				printf("Dwarf, all\tadvantage on saving throws against poison and resistance to poison damage\n");
				printf("Dwarf, all\tproficiency with the battleaxe, handaxe, throwing hammer, and warhammer\n");
				printf("Dwarf, all\tproficiency with the artisan's tools of your choice: smith's, brewer's, or mason's tools");
				printf("Dwarf, all\typroficient in history checks with origin of stonework and add 2X proficiency bonus\n");
				printf("Dwarf, Gray\tadvantage on saving throws against illusions and being charmed or paralyzed\n");
				printf("Dwarf, Gray\tdisadvantage on attack rolls and perception checks in sunlight\n");
				printf("Dwarf, Gold\thit point maximum increases by 1 per level\n");
				printf("Dwarf, Hill\thit point maximum increases by 1 per level\n");
				printf("Dwarf, Mountain\tproficiency with light and medium armor\n");
				printf("Dwarf, Shield\tproficiency with light and medium armor\n");
				printf("Elf, all\tproficiency in perception\n");
				printf("Elf, all\tadvantage on saving throws against being charmed");
				printf("Elf, all\tcannot be put to sleep by nonmagical means\n");
				printf("Elf, all\telves don't sleep instead meditate for four hours a day to gain a long rest\n");
				printf("Gnome, Deep\tadvantage on all intelligence, wisdom, and charisma saving throws against magic\n");
				printf("Elf, Dark\tproficiency with rapiers, shortswords, and hand crossbows\n");
				printf("Elf, Dark\tdisadvantage on attack rolls and perception checks in sunlight\n");
				printf("Elf, High\tproficiency with the longsword, shortsword, shortbow, and longbow\n");
				printf("Firbolg\t\magically become invisible until the start of your next turn or until you attack\n");
				printf("Firbolg\tyou count as large when determining your carrying capacity and weigh you can move\n");
				printf("Firbolg\tspeak to beasts and plants but cannot understand them\n");
				printf("Genasi, Air\thold your breath indefinitely unless you are incapacitated\n");
				printf("Genasi, Earth\tmove across difficult terrain made of earth at normal speed\n");
				printf("Genasi, Fire\tties to the Elemental Plane of Fire makes your dark vision unusual\n");
				printf("Genasi, Fire\t\resistance to fire\n");
				printf("Genasi, Water\tresistance to acid\n");
				printf("Genasi, Water\tbreathe in air and water\n");
				printf("Gnome, all\tadvantage on all intelligence, wisdom, and charisma saving throws against magic\n");
				printf("Gnome, Forest\tcommunicate simple ideas with small or smaller beasts\n");
				printf("Gnome, Rock\tadd double proficiency bonus to history checks on magic, alchemical, & technological items\n");
				printf("Gnome, Rock\tproficient with tinker tools\n");
				printf("Gnome, Rock\tcan construct a tiny clockwork device (see rules on page 37 of the Player's Handbook\n");
				printf("Gnome, Svirfneblin\tadvantage on stealth checks to hide in rocky terrain\n");
				printf("Goblin\tdeal extra damage (equal to level) against medium or larger create\n");
				printf("Goblin\ttake the disengage or hide action as a bonus action\n");
				printf("Goliath\tacclimated to high elevations and cold climates including above 20k feet\n");
				printf("Goliath\tproficiency in athletics\n");
				printf("Goliath\tyou count as large when determining your carrying capacity and weigh you can move\n");
				printf("Goliath\tcan use your reaction to reduce the damage by 1d12 + constitution modifier\n");
				printf("Halfling\tadvantage on saving throws against being frightened\n");
				printf("Halfling\tcan move through the space of a creature larger than you\n");
				printf("Halfling\tcan re-roll 1 on an attack, ability, or saving throw once\n");
				printf("Halfling, Lightfoot\tcan attempt to hide even when only obscured a creature larger than you\n");
				printf("Halfling, Stout\tadvantage on saving throws against being poisoned and resistance to poison\n");
				printf("Half-Elf\tadvantage on saving throws against being charmed\n");
				printf("Half-Elf\tcant be put to sleep by nonmagical means\n");
				printf("Half-Elf\tselect two proficiencies in two skills\n");
				printf("Half-Orc\tproficient in intimidation\n");
				printf("Half-Orc\twhen reduced to 0 HP you may drop to 1 HP instead once per long rest\n");
				printf("Half-Orc\twhen you score a critical hit with a melee weapon add a third dice to the damage roll\n");
				printf("Hobgoblin\t\proficient with two martial weapons of your choice and in light armor\n");
				printf("Hobgoblin\tif you miss an attack, add a one for every ally nearby (max 5)\n");
				printf("Human, Variant\tgain one feat of your choice at level 1\n");
				printf("Kenku\t\tadvantage on forgery related checks\n");
				printf("Kenku\tchoose 2 to be proficient in: acrobatics, deception, stealth, and sleight of hand\n");
				printf("Kenku\tcan attempt to mimic sounds you have heard including voices\n");
				printf("Kobold\tcause nearby allies to gain advantage on enemies within 10ft \n");
				printf("Kobold\tadvantage against enemies who are standing next to an ally");
				printf("Kobold\tdisadvantage on attack rolls and perception checks in sunlight\n");
				printf("Lizardfolk\tbite for 1d6 piercing damage + strength modifier\n");
				printf("Lizardfolk\tcan harvest bone/hide from certain corpses, and craft weapons/armor\n");
				printf("Lizardfolk\tcan hold your breath for up to 15 minutes\n");
				printf("Lizardfolk\tselect 2 proficiencies: animal handling, nature, perception, stealth, survival\n");
				printf("Lizardfolk\twhen unarmored your armor rating is 13 plus your dexterity modifier\n");
				printf("Lizardfolk\tcan bite with a bonus action and gain temporary HP\n");
				printf("Orc\tmove up to 30 ft as a bonus action towards an enemy you can see or hear\n");
				printf("Orc\tproficient in the intimidation skill\n");
				printf("Orc\tyou count as large when determining your carrying capacity and weight you can move\n");
				printf("Tabaxi\tcan double your speed in combatuntil the end of your turn\n");
				printf("Revenant (subclass)\tsee Codex: Unearthed Arcana");
				printf("Tabaxi\tcan claw for 1d4 + strength modifier\n");
				printf("Tiefling\tresistance to fire damage\n");
				printf("Tiefling, Abyssal\tmaximum HP increases by 1/2 your level (minimum 1)\n");
				printf("Tiefling, Infernal\tresistance to fire damage\n");
				printf("Triton\tcan breathe in air and water\n");
				printf("Triton\tresistance to cold damage and ignore drawbacks from deep and underwater environments\n");
				printf("Triton\t\tcan communicate simple ideas with beasts who breathe water\n");
				printf("Yuan-ti Pureblood\tdvantage against saving throws against spells and other magical affects\n");
				printf("Yuan-ti Pureblood\timmune to poison damage and the poisoned condition\n");
				break;
			}
			case 6: {
				printf("Aarakocra\t\tElemental Evil Player's Companion page 3\n");
				printf("Aasimar\t\tVolo's Guide to Monsters page 104\n");
				printf("Bugbear\t\tVolo's Guide to Monsters page 119\n");
				printf("Changeling\t\tCodex: Unearthed Arcana page 3\n");
				printf("Dragonborn\t\tPlayer's Handbook page 34\n");
				printf("Dwarf\t\tPlayer's Handbook page 18\n");
				printf("Elf\t\tPlayer's Handbook page 23\n");
				printf("Firbolg\t\tVolo's Guide to Monsters page 107\n");
				printf("Genasi\t\tElemental Evil Player's Companion page 3\n");
				printf("Gnome\t\tPlayer's Handbook page 17\n");
				printf("Gnome, Deep\t\tElemental Evil Player's Companion page 7\n");
				printf("Goblin\t\tVolo's Guide to Monsters page 104\n");
				printf("Goliath\t\tElemental Evil Player's Companion page 3 and Volo's Guide to Monsters page 108\n");
				printf("Halfling\t\tPlayer's Handbook page 36\n");
				printf("Half-Elf\t\tPlayer's Handbook page 38\n");
				printf("Half-Orc\t\tPlayer's Handbook page 40\n");
				printf("Hobgoblin\t\tVolo's Guide to Monsters page 109\n");
				printf("Human\t\tPlayer's Handbook page 29\n");
				printf("Human, Variant\t\tPlayer's Handbook page 29\n");
				printf("Kenku\t\tVolo's Guide to Monsters page 109\n");
				printf("Kobold\t\tVolo's Guide to Monsters page 119\n");
				printf("Lizardfolk\t\tVolo's Guide to Monsters page 112\n");
				printf("Orc\t\tVolo's Guide to Monsters page 120\n");
				printf("Tabaxi\t\tVolo's Guide to Monsters page 115\n");
				printf("Tiefling\t\tPlayer's Handbook page 42\n");
				printf("Tiefling, Abyssal\t\tCodex: Unearthed Arcana page 10\n");
				printf("Tiefling, Infernal\t\tCodex: Unearthed Arcana page 10\n");
				printf("Triton\t\tVolo's Guide to Monsters page 117\n");
				printf("Yuan-ti Pureblood\t\tVolo's Guide to Monsters page 120\n");
				break; } //need to update this
			case 7: {break; } // end case 7 user is ready
			} //end switch(get_int(1, 7);)
		}// end if user asks for more info
		switch (choice_race) {
		case 1: {
			strcpy(myrace, "Aarakocra");
			strcpy(mysubrace, "none");
			choice_race = 0;
			choice_made = true;
			break; }
		case 2: {
			printf("The Aasimar has the following sub races select one:\n");
			printf("1.\tFallen Aasimar\n2.\tProtector Aasimar\n3.\tScourge Aasimar\n4.\tRevenant\n5.\tgo back\n");
			choice_sub = get_int(1, 5);
			if (choice_sub != 5) {
				strcpy(myrace, "Aasimar");
				choice_made = true;
				switch (choice_sub) {
				case 1:
					strcpy(mysubrace, "Fallen");
					break;
				case 2:
					strcpy(mysubrace, "Protector");
					break;
				case 3:
					strcpy(mysubrace, "Scourge");
					break;
				case 4:
					strcpy(mysubrace, "Revenant");
					break;
					break;
				}
			}
			break; }
		case 3: {
			strcpy(myrace, "Bugbear");
			strcpy(mysubrace, "none");
			choice_race = 0;
			choice_made = true;
			break; }
		case 4: {
			strcpy(myrace, "Changeling");
			strcpy(mysubrace, "none");
			choice_race = 0;
			choice_made = true;
			break; }
		case 5: {
			printf("The Dragonborn has the following ancestries to choose from select one:\n");
			printf("1.\t Black\n2.\tBlue\n3.\tBrass\n4. Bronze\n5.\tCoppor\n6.\tGold\n7.\tGreen\n8.\tRed\n9.\tSilver\n10.\tWhite\n11.\t*Revenant\n12.\tgo back\n");
			choice_sub = get_int(1, 12);
			if (choice_sub != 12) {
				strcpy(myrace, "Dragonborn");
				choice_made = true;
				switch (choice_sub) {
				case 1:
					strcpy(mysubrace, "Black");
					break;
				case 2:
					strcpy(mysubrace, "Blue");
					break;
				case 3:
					strcpy(mysubrace, "Brass");
					break;
				case 4:
					strcpy(mysubrace, "Bronze");
					break;
				case 5:
					strcpy(mysubrace, "Coppor");
					break;
				case 6:
					strcpy(mysubrace, "Gold");
					break;
				case 7:
					strcpy(mysubrace, "Green");
					break;
				case 8:
					strcpy(mysubrace, "Red");
					break;
				case 9:
					strcpy(mysubrace, "Silver");
					break;
				case 10:
					strcpy(mysubrace, "White");
					break;
				case 11:
					strcpy(mysubrace, "Revenant");
					break;
				}
			}

			break; }
		case 6: {
			printf("The Dwarf has the following sub-races to choose from select one:\n");
			printf("1.\t*Gold Dwarf\n2.\tGray Dwarf\n3.\tHill Dwarf\n4. Mountain Dwarf\n5.\t*Shield Dwarf\n6.\t*Revenant\n7.\tgo back\n");
			choice_sub = get_int(1, 7);
			if (choice_sub != 7) {
				strcpy(myrace, "Dwarf");
				choice_made = true;
				switch (choice_sub) {
				case 1:
					strcpy(mysubrace, "Gold");
					break;
				case 2:
					strcpy(mysubrace, "Gray");
					break;
				case 3:
					strcpy(mysubrace, "Hill");
					break;
				case 4:
					strcpy(mysubrace, "Mountain");
					break;
				case 5:
					strcpy(mysubrace, "Shield");
					break;
				case 6:
					strcpy(mysubrace, "Revenant");
					break;
					break;
				}
			}
		}
		case 7: {
			printf("The Elf has the following sub-races to choose from select one:\n");
			printf("1.\tDark Elf (Drow)\n2.\tHigh Elf\n3.\t*Moon Elf\n4.\t*Sun Elf\n5.\tWood Elf\n6.\t*Revenant\n7.\tgo back\n");
			choice_sub = get_int(1, 7);
			if (choice_sub != 7) {
				strcpy(myrace, "Elf");
				choice_made = true;
				switch (choice_sub) {
				case 1:
					strcpy(mysubrace, "Dark");
					break;
				case 2:
					strcpy(mysubrace, "High");
					break;
				case 3:
					strcpy(mysubrace, "Moon");
					break;
				case 4:
					strcpy(mysubrace, "Sun");
					break;
				case 5:
					strcpy(mysubrace, "Wood");
					break;
				case 6:
					strcpy(mysubrace, "Revenant");
					break;
					break;
				}
			}
		}
		case 8: {
			strcpy(myrace, "Firbolg");
			strcpy(mysubrace, "none");
			choice_race = 0;
			choice_made = true;
			break; }
		case 9: {
			printf("The Genasi has the following sub-races to choose from select one:\n");
			printf("1.\tAir Genasi\n2.\tEarth Genasi\n3.\tFire Genasi\n4.\tWater Genasi\n5.\tRevenant\n6.\tgo back\n");
			choice_sub = get_int(1, 6);
			if (choice_sub != 6) {
				strcpy(myrace, "Genasi");
				choice_made = true;
				switch (choice_sub) {
				case 1:
					strcpy(mysubrace, "Air");
					break;
				case 2:
					strcpy(mysubrace, "Earth");
					break;
				case 3:
					strcpy(mysubrace, "Fire");
					break;
				case 4:
					strcpy(mysubrace, "Water");
					break;
				case 5:
					strcpy(mysubrace, "Revenant");
					break;
					break;
				}
			}
		}
		case 10: {
			printf("The Gnome has the following sub races to choose from select one:\n");
			printf("1.\t Deep Gnome\n2.\tForest Gnome\n3.\tRock Gnome\n4.\tSvirfneblin\n5.\tRevenant\n6.\tgo back\n");
			choice_sub = get_int(1, 6);
			if (choice_sub != 6) {
				strcpy(myrace, "Gnome");
				choice_made = true;
				switch (choice_sub) {
				case 1:
					strcpy(mysubrace, "Deep");
					break;
				case 2:
					strcpy(mysubrace, "Forest");
					break;
				case 3:
					strcpy(mysubrace, "Rock");
					break;
				case 4:
					strcpy(mysubrace, "Svirfneblin");
					break;
				case 5:
					strcpy(mysubrace, "Revenant");
					break;
					break;
				}
			}
		}
		case 11: {
			strcpy(myrace, "Goblin");
			strcpy(mysubrace, "none");
			choice_race = 0;
			choice_made = true;
			break; }
		case 12: {
			strcpy(myrace, "Goliath");
			strcpy(mysubrace, "none");
			choice_race = 0;
			choice_made = true;
			break; }
		case 13: {
			strcpy(myrace, "Hobgoblin"); break;
			strcpy(mysubrace, "none");
			choice_race = 0;
			choice_made = true;
			break; }
		case 14: {
			strcpy(myrace, "Half-Elf");
			strcpy(mysubrace, "none");
			choice_race = 0;
			choice_made = true;
			break; }
		case 15: {
			printf("The Halfling has the following sub races to choose from select one:\n");
			puts("Choose between the following");
			printf("1.\tLightfoot\n2.\tStout\n3.\tStrongheart\n4.\tRevenant\n5.\tgo back\n");
			choice_sub = get_int(1, 5);
			if (choice_sub != 5) {
				strcpy(myrace, "Halfling");
				choice_made = true;
				switch (choice_sub) {
				case 1:
					strcpy(mysubrace, "Lightfoot");
					break;
				case 2:
					strcpy(mysubrace, "Stout");
					break;
				case 3:
					strcpy(mysubrace, "Strongheart");
					break;
				case 4:
					strcpy(mysubrace, "Revenant");
					break;
					break;
				}
			}
		}
		case 16: {
			strcpy(myrace, "Half-Orc");
			strcpy(mysubrace, "none");
			choice_race = 0;
			choice_made = true;
			break; }
		case 17: {
			strcpy(myrace, "Human");
			strcpy(mysubrace, "none");
			choice_race = 0;
			choice_made = true;
			break; }
		case 18: {
			strcpy(myrace, "Human, Variant");
			strcpy(mysubrace, "none");
			choice_race = 0;
			choice_made = true;
			break; }
		case 19: {
			strcpy(myrace, "Kenku");
			strcpy(mysubrace, "none");
			choice_race = 0;
			choice_made = true;
			break; }
		case 20: {
			strcpy(myrace, "Kobold");
			strcpy(mysubrace, "none");
			choice_race = 0;
			choice_made = true;
			break; }
		case 21: {
			strcpy(myrace, "Lizardfolk");
			strcpy(mysubrace, "none");
			choice_race = 0;
			choice_made = true;
			break; }
		case 22: {
			strcpy(myrace, "Minotaur");
			strcpy(mysubrace, "none");
			choice_race = 0;
			choice_made = true;
			break; }
		case 23: {
			strcpy(myrace, "Orc");
			strcpy(mysubrace, "none");
			choice_race = 0;
			choice_made = true;
			break; }
		case 24: {
			printf("The Shifter has the following sub races to choose from select one:\n");
			puts("Choose between the following");
			printf("1.\tBeasthide\n2.\tCliffwalk\n3.\tLongstride\n4.\tLongtooth\n5.\tRazorclaw\n6.\tRevenant\n7.\tWildhunt\n8.\tgo back\n");
			choice_sub = get_int(1, 8);
			if (choice_sub != 8) {
				strcpy(myrace, "Shifter");
				choice_made = true;
				switch (choice_sub) {
				case 1:
					strcpy(mysubrace, "Beasthide");
					break;
				case 2:
					strcpy(mysubrace, "Cliffalk");
					break;
				case 3:
					strcpy(mysubrace, "Longstride");
					break;
				case 4:
					strcpy(mysubrace, "Longtooth");
					break;
				case 5:
					strcpy(mysubrace, "Razorclaw");
					break;
				case 6:
					strcpy(mysubrace, "Revenant");
					break;
				case 7:
					strcpy(mysubrace, "Wildhunt");
					break;
					break;
				}
			}
		}
		case 25: {
			strcpy(myrace, "Tabaxi");
			strcpy(mysubrace, "none");
			choice_race = 0;
			choice_made = true;
			break; }
		case 26: {
			printf("The Tiefling has the following sub races to choose from select one:\n");
			puts("Choose between the following");
			printf("1.\tno sub race\n2.\t*Abyssal\n3.\t*Infernal\n4.\tRevenant\n5.\tgo back\n");
			choice_sub = get_int(1, 5);
			if (choice_sub != 5) {
				strcpy(myrace, "Tiefling");
				choice_made = true;
				switch (choice_sub) {
				case 1:
					strcpy(mysubrace, "none");
					break;
				case 2:
					strcpy(mysubrace, "Abyssal");
					break;
				case 3:
					strcpy(mysubrace, "Infernal");
					break;
				case 4:
					strcpy(mysubrace, "Revenant");
					break;
					break;
				}
			}

			break; }
		case 27: {
			strcpy(myrace, "triton");
			strcpy(mysubrace, "none");
			choice_race = 0;
			choice_made = true;
			break; }
		case 28: {
			strcpy(myrace, "Yuan-ti Pureblood");
			strcpy(mysubrace, "none");
			choice_race = 0;
			choice_made = true;
			break;
		case 29:
			strcpy(myrace, "Warforged");
			strcpy(mysubrace, "none");
			choice_race = 0;
			choice_made = true;
			break;
		case 30: break;
		}
		}//end sub race switch
	} while (!choice_made);
	*sub_race = choice_made;
	return choice_race;
}

int get_Abil_Mods(int stat) {
	switch (stat) {
	case 3:
		return -4;
		break;
	case 4:
	case 5:
		return -3;
		break;
	case 6:
	case 7:
		return -2;
		break;
	case 8:
	case 9:
		return -1;
		break;
	case 10:
	case 11:
		return 0;
		break;
	case 12:
	case 13:
		return 1;
		break;
	case 14:
	case 15:
		return 2;
		break;
	case 16:
	case 17:
		return 3;
		break;
	case 18:
	case 19:
		return 4;
		break;
	case 20:
	case 21:
		return 5;
		break;
	case 22:
	case 23:
		return 6;
		break;
	case 24:
	case 25:
		return 7;
		break;
	}
} //COMPLETE
int four_d_6_drop_lowest() {
	int count, count2;  //used in for loops
	int temp;           //used to sort highest to lowest
	int dice[4];        //stores dice rolls

	for (count = 0; count < 4; count++)
		dice[count] = dice_roll(6); //roll dice for stats

	for (count = 0; count < 4; count++) {
		for (count2 = count + 1; count2 < 4; count2++)
		{
			if (dice[count] < dice[count2])
			{
				temp = dice[count];
				dice[count] = dice[count2];
				dice[count2] = temp;
			}
		}
	}   //loops to sort from highest to lowest

	printf("You rolled: ");
	for (count = 0; count < 4; count++)
		printf("%d ", dice[count]); //displays dice results in order

	printf("After dropping %d, the total is: %d.\n", dice[3], dice[0] + dice[1] + dice[2]); //displays total
	return (dice[0] + dice[1] + dice[2]); //return total
} //COMPLETE

void get_String(bool flag, char new_string[], char string_type[]) {
	int n, choice;
	char junk;
	if (!flag)
		scanf("%c", &junk);
	fgets(new_string, SIZE, stdin);
	for (n = 0; n < 50 && new_string[n] != "\0"; n++)
		if (new_string[n] == '\n')
			new_string[n] = '\0';// eliminates the newline character
} //COMPLETE
void pause() {
	puts("Press [ENTER] to continue . . .");
	getchar();
} //COMPLETE
void print_class(int class) {
	switch (class) {
	case 1:
		printf("Class:\tBarbarian\n");
		break;
	case 2:
		printf("Class:\tBard\n");
		break;
	case 3:
		printf("Class:\tCleric\n");
		break;
	case 4:
		printf("Class:\tDruid\n");
		break;
	case 5:
		printf("Class:\tFighter\n");
		break;
	case 6:
		printf("Class:\tMonk\n");
		break;
	case 7:
		printf("Class:\tPaladin\n");
		break;
	case 8:
		printf("Class:\tRanger\n");
		break;
	case 9:
		printf("Class:\tSorcerer\n");
		break;
	case 10:
		printf("Class:\tWarlock\n");
		break;
	case 11:
		printf("Class:\tWizard\n");
		break;
	}
} //modify after adding all classes //modify after adding all races/sub-races
void print_race(int race_int, int sub_race_int) {
	switch (race_int) {
	case 1:
		printf("Race: Aarakocra\nSub Race: N/A\n");
		break;
	case 2:
		printf("Race: Aasimar\n");
		switch (sub_race_int) {
		case 1:
			printf("Sub Race: Protector Aasimar\n");
			break;
		case 2:
			printf("Sub Race: Scourge Aasimar\n");
			break;
		case 3:
			printf("Sub Race: Fallen Aasimar\n");
			break;
		}
		break;
	case 3:
		printf("Race: Bugbear\nSub Race: N/A\n");
		break;
	case 4:
		printf("Race: Dragonborn\n");
		switch (sub_race_int) {
		case 1:
			printf("Sub Race: black\n");
			break;
		case 2:
			printf("Sub Race: Blue\n");
			break;
		case 3:
			printf("Sub Race: Brass\n");
			break;
		case 4:
			printf("Sub Race: Bronze\n");
			break;
		case 5:
			printf("Sub Race: Copper\n");
			break;
		case 6:
			printf("Sub Race: Gold\n");
			break;
		case 7:
			printf("Sub Race: Green\n");
			break;
		case 8:
			printf("Sub Race: Red\n");
			break;
		case 9:
			printf("Sub Race: Silver\n");
			break;
		case 10:
			printf("Sub Race: White\n");
			break;
		}
		break;
	case 5:
		printf("Race: Deep Gnome\nSub Race: N/A\n");
		break;
	case 6:
		printf("Race: Dwarf\n");
		switch (sub_race_int) {
		case 1:
			printf("Sub Race: Hill Dwarf\n");
			break;
		case 2:
			printf("Sub Race: Mountain Dwarf\n");
			break;
		case 3:
			printf("Sub Race: Shield Dwarf\n");
			break;
		case 4:
			printf("Sub Race: Gold Dwarf\n");
			break;
		case 5:
			printf("Sub Race: Gray Dwarf\n");
			break;
		}
		break;
	case 7:
		printf("Race: Elf\n");
		switch (sub_race_int) {
		case 1:
			printf("Sub Race: High-Elf\n");
			break;
		case 2:
			printf("Sub Race : Wood-Elf\n");
			break;
		case 3:
			printf("Sub Race: Dark-Elf (Drow)\n");
			break;
		case 4:
			printf("Sub Race: Moon-Elf\n");
			break;
		case 5:
			printf("Sub Race: Sun-Elf\n");
			break;
		}
		break;
	case 8:
		printf("Race: Firbolg\nSub Race: N/A\n");
		break;
	case 9:
		printf("Race: Genasi\n");
		switch (sub_race_int) {
		case 1:
			printf("Sub Race: Air Genasi\n");
			break;
		case 2:
			printf("Sub Race: Earth Genasi\n");
			break;
		case 3:
			printf("Sub Race: Fire Genasi\n");
			break;
		case 4:
			printf("Sub Race: Water Genasi\n");
			break;
		}
		break;
	case 10:
		printf("Race: Gnome\n");
		switch (sub_race_int) {
		case 1:
			printf("Sub Race: Forest Gnome\n");
			break;
		case 2:
			printf("Sub Race: Rock Gnome\n");
			break;
		case 3:
			printf("Sub Race: Deep Gnome\n");
			break;
		case 4:
			printf("Sub Race: Svirfneblin\n");
			break;
		}
		break;
	case 11:
		printf("Race: Goblin\nSub Race: N/A\n");
		break;
	case 12:
		printf("Race: Goliath\nSub Race: N/A\n");
		break;
	case 13:
		printf("Race: Hobgoblin\nSub Race: N/A\n");
		break;
	case 14:
		printf("Race: Half-Elf\nSub Race: N/A\n");
		break;
	case 15:
		printf("Race: Halfling\n");
		switch (sub_race_int) {
		case 1:
			printf("Sub Race: Stout\n");
			break;
		case 2:
			printf("Sub Race: Lightfoot\n");
			break;
		case 3:
			printf("Sub Race: Strongheart\n");
			break;
		}
		break;
	case 16:
		printf("Race: Half-Orc\nSub Race: N/A\n");
		break;
	case 17:
		printf("Race: Human\nSub Race: N/A\n");
		break;
	case 18:
		printf("Race: Kenku\nSub Race: N/A\n");
		break;
	case 19:
		printf("Race: Kobold\nSub Race: N/A\n");
		break;
	case 20:
		printf("Race: Lizardfolk\nSub Race: N/A\n");
		break;
	case 21:
		printf("Race: Orc\nSub Race: N/A\n");
		break;
	case 22:
		printf("Race: Tabaxi\nSub Race: N/A\n");
		break;
	case 23:
		printf("Race: Tiefling\nSub Race: N/A\n");
		break;
	case 24:
		printf("Race: Triton\nSub Race: N/A\n");;
		break;
	case 25:
		printf("Race: Yuan-Ti Pureblood\nSub Race: N/A\n");
		break;
	}
} //modify after adding all races and sub races
void sort_array(int arr_size, int arr[6]) {
	int count, count2, temp;
	for (count = 0; count < arr_size; count++)
		for (count2 = count + 1; count2 < arr_size; count2++)
			if (arr[count] < arr[count2]) {
				temp = arr[count];
				arr[count] = arr[count2];
				arr[count2] = temp;
			}
} //COMPLETE
