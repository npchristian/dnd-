#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include <stdbool.h>
#include <time.h>

#define SIZE 50

/*********** DATA STRUCTURE ***********/
typedef struct{
    char name[SIZE];    //stores character name
    
    int armor;          //stores character armor
    int level;          //stores character charisma
    int charisma;       //stores character charism
    int char_mod;       //stores character charisma mod
    int class;          //stores character class
    int sub_class;      //stores cahracter sub class
    int constitution;   //stores character constitution
    int con_mod;        //stores character constitution mod
    int dexterity;      //stores character dexterity
    int dex_mod;        //stores character dexterity mod
    int hit_points;     //stores character hit points
    int intelligence;   //stores character intelligence
    int intel_mod;      //stores character intelligence mod
    int proficiency;    //stores character proficiency
    int race;           //stores character race
    int sub_race;       //stores character sub-race
    int strength;       //stores character strength
    int str_mod;        //stores character strength mod
    int to_hit;         //stores to-hit
    int wisdom;         //stores character wisdom
    int wis_mod;        //stores character wisdom mod
    
    double weight;      //stores character weight
    double max_Carry;   //stores character max_carry
    
    bool feats;         //stores whether character has feats
} Character;

/*********** FUNCTION HEADERS***********/
Character create_Character();               //generic call to create a character
Character get_Stats(Character new_Char);    //gets the 5 stats for the character

int check_stats(Character new_character);               //checks that entered stats are correct
int dice_roll(int sides);                               //roles an n sided dice
int four_d_6_drop_lowest();                             //sorts four dice rolls, drops lowest, and sums remaining 3
int get_class();                                        //returns the class chosen by user
int get_int();                                          //returns an integer entered by user
int get_race();                                         //returns the race chosen by user
int get_stat_mods(int stat);                            //returns character stat mod for a given stat
int get_sub_race(int race);                             // get the sub race

void get_String(char new_string[], char string_type[]); //returns a string entered by user

/*********** MAIN***********/
int main(){
    char name[SIZE];                                                                        //stores character name
    Character myCharacter;                                                                  //create a character
    puts("Welcome to the Dungeons and Dragons fifth edition character creation module.");   //welcome message
    myCharacter = create_Character();                                                       //character creation call
    return 0;
}

/*********** FUNCTION DEFINITIONS***********/
Character create_Character(){
    
    /*********** VARIABLE DECLARATIONS***********/
    int choice;                 // used to store user decision
    Character new_Character;    // newly created character returned
    
    /*********** GET NAME ***********/
    puts("Please enter your character's name: ");       //prompt character name
    get_String(new_Character.name, "character's name"); //get name from user input

    /*********** GET LEVEL, CLASS, & RACE*********/
    printf("What level will %s be (1-20)? ", new_Character.name);   //prompt for level
    new_Character.level = get_int(1, 20);                           //get level
    new_Character.class = get_class();                              //get class
    new_Character.race = get_race();                                //get race
    new_Character.sub_race = get_sub_race(new_Character.race);      //get sub-race
    
    /*********** GET STATS ***********/
    new_Character = get_Stats(new_Character);   //get stats

    return new_Character; //return newly created character
}
Character get_Stats(Character new_Char){
    
    /*********** VARIABLE DECLARATIONS***********/
    int stats[6];                       //stores user stats
    int choice, choice2 = 2, choice3;   // stores user decisions
    int count, count2;                  //used in for loops
    int temp;                           //used to sort highest to lowest
    
    /*********** GET THE 6 STATS***********/
    while(choice2 ==2){
        puts("We will begin by rolling your stats as if you were level 1. Stat modifiers due");
        puts("to level, race, and other factors will be added later. You may roll your dice");
        puts("(4d6 drop lowest) or the module can roll it for you. How would you like to");
        puts("compute your stats?");
        printf("1.\tI will roll and manually enter my stats\n2.\tRoll my dice for me\n");
        choice = get_int(1,2);  //Explain program and ask for input
        
        while (choice2 == 2 && choice == 1){ //while user has not confirmed their choice(s)
            puts("Enter your charisma:");
            new_Char.charisma = get_int(3,18);
            puts("Enter your Constitution:");
            new_Char.constitution = get_int(3,18);
            puts("Enter your dexterity:");
            new_Char.dexterity = get_int(3,18);
            puts("Enter your intelligence:");
            new_Char.intelligence = get_int(3,18);
            puts("Enter your strenth:");
            new_Char.strength = get_int(3,18);
            puts("Enter your wisdom:");
            new_Char.wisdom = get_int(3,18);
            choice2=check_stats(new_Char);
        } //prompt user for the stats
        
 
        if (choice==2){
            srand(time(NULL));
            for(count =0; count<6; count++){
                stats[count] = four_d_6_drop_lowest();
            } //if user wishes, roll dice for user
            
            for(count=0; count<6; count++)
            {
                for(count2=count+1; count2<6; count2++)
                {
                    if(stats[count] < stats[count2])
                    {
                        temp = stats[count];
                        stats[count] = stats[count2];
                        stats[count2] = temp;
                    }
                }
            }   //loops to sort from highest to lowest
            
            while (choice2==2){
                new_Char.charisma=new_Char.constitution = new_Char.dexterity=new_Char.intelligence=new_Char.strength=new_Char.wisdom = 0;
                count = 0;      //initialize values to zero
                
                puts("We will assign your stats from highest to lowest:"); 
                while(count<6){
                    printf("Where will you assign your %d roll?\n", stats[count]);
                    printf("1.\tCharisma\n2.\tConstitution\n3.\tDexterity\n4.\tIntelligence\n5.\tStrength\n6.\tWisdom\n");
                        //prompt user for stat selections
                        
                    choice3=get_int(1,6);
                    
                    switch(choice3){
                        case 1:
                            if (new_Char.charisma == 0){
                                    new_Char.charisma = stats[count];
                                    count++;
                                }
                            else
                                printf("Error: charisma already given value: %d.\n", new_Char.charisma);
                            break;
                        case 2:
                            if (new_Char.constitution == 0){
                                    new_Char.constitution = stats[count];
                                    count++;
                                }
                            else
                                printf("Error: constitution already given value: %d.\n", new_Char.constitution);
                            break;
                        case 3:
                            if (new_Char.dexterity == 0){
                                    new_Char.dexterity = stats[count];
                                    count++;
                                }
                            else
                                printf("Error: dexterity already given value: %d.\n", new_Char.dexterity);
                        break;
                        case 4:
                            if (new_Char.intelligence == 0){
                                    new_Char.intelligence = stats[count];
                                    count++;
                                }
                            else
                                printf("Error: intelligence already given value: %d.\n", new_Char.intelligence);
                        break;
                        case 5:
                            if (new_Char.strength == 0){
                                    new_Char.strength = stats[count];
                                    count++;
                                }
                            else
                                printf("Error: strength already given value: %d.\n", new_Char.strength);
                        break;
                        case 6:
                            if (new_Char.wisdom == 0){
                                    new_Char.wisdom = stats[count];
                                    count++;
                                }
                            else
                                printf("Error: wisdom already given value: %d.\n", new_Char.wisdom);
                        break;
                    }
                }
                choice2=check_stats(new_Char);
            }
        }
    }
    return new_Char; //return the new character & stats. 
}

int check_stats(Character new_character){
        printf("%s's stats are:\n", new_character.name);            
        printf("Charisma:\t%d\n", new_character.charisma);
        printf("Constitution:\t%d\n", new_character.constitution);
        printf("Dexterity:\t%d\n", new_character.dexterity);
        printf("Intelligence:\t%d\n", new_character.intelligence);
        printf("Strength:\t%d\n", new_character.strength);
        printf("Wisdom:\t\t%d\n", new_character.wisdom);
        printf("Is this correct?\n1.\tYes.\n2.\tNo.\n");
        return (get_int(1,2));  //print stats, ask if they are correct, and return the answer
}
int dice_roll(int sides){
    return (1 + rand()% (sides+1-1));
}
int get_class(){
    /*********** GET CLASS ***********/
        puts("What class will you play?");
        printf("1.\tBarbarian\n2.\tBard\n3.\tCleric\n4.\tDruid\n5.\tFighter\n");
        printf("6.\tMonk\n7.\tPaladin\n8.\tRanger\n9.\tSorcerer\n10.\tWarlock\n11.\tWizard\n");
        return (get_int(1,11));
}
int get_int(int lower, int upper){
    int choice;
    char junk;
    bool flag = true;
    
    while(flag){
        if(scanf("%d", &choice)){
            if (choice > upper || choice < lower)
            {
                printf("Error: restrict input to %d - %d.\n", lower, upper);
                printf("Try again: ");
            }
            else
            {
                printf("\n");
                flag = false;
            }
        }
        else
        {
            scanf("%c", &junk); //consumes the char mistakenly entered
            printf("Error: restrict input to an integer (1, 2, 3, etc.)\n");
        }
    }
    return choice;
}
int get_race(){
    /*********** VARIABLE DECLARATIONS***********/
    int choice; //used to read user input
    /*********** GET RACE ***********/
    do{
        puts("What race will you play?");
        printf("1.\tAarakocra\n2.\tAasimar\n3\tBugbear\n.4.\tDragonborn\n");
        printf("5.\tDeep Gnome\n6.\tDwarf\n7.\tElf\n8\tFirbolg\n");
        printf("9.\tGenasi\n10.\tGnome\n11.\tGoblin\n12.\tGoliath\n");
        printf("13.\tHobgoblin\n14.\tHalf-Elf\n15.\tHalfling\n16.\tHalf-Orc\n17.\tHuman\n18.\tKenku\n.19.\tKobold\n");
        printf("20.\tLizardfolk\n21.\tOrc\n22.\tTabaxi\n23.\tTiefling\n24.\tTriton\n25.\tYuan-ti Pureblood\n");
        printf("26.\tWhere can I find more information?\n");
        choice = get_int(1,26);
        if (choice ==26)
        {
            printf("Dragonborn, Dwarf, Elf, Gnome, Halfling, Half-Elf, Half-Orc, Human, Tiefling\n");
            printf("->\tSee Player's Handboook page 17");
            printf("Aasimar,  Bugbear, Firbolg, Goliath, Goblin, Hobgoblin, Kenku, Kobold, Lizardfolk, Orc, Tabaxi, Triton\n");
            printf("Yuan-ti Pureblood");
            printf("->\tSee Volo's Guide to Monsters page 104 ");
            printf("Aarakocra, Deep Gnome, Genasi, Goliath  \n->\t See Elemental Evil Player's Companion page 3\n");
            puts("See Sword-Coast Adventurer's guide page 103 for more information on these races and");
            puts("additional content");
        }
    }while(choice==26);
}
int get_stat_mods(int stat){
    switch (stat){
        case 3:
            return -4;
            break;
        case 4 ... 5:
            return -3;
            break;
        case 6 ... 7:
            return -2;
            break;
        case 8 ... 9:
            return -1;
            break;
        case 10 ... 11:
            return 0;
            break;
        case 12 ... 13:
            return 1;
            break;
        case 14 ... 15:
            return 2;
            break;
        case 16 ... 17:
            return 3;
            break;
        case 18 ... 19:
            return 4;
            break;
        case 20 ... 21:
            return 5;
            break;
        case 22 ... 23:
            return 6;
            break;
        case 24 ... 25:
            return 7;
            break;
    }
}
int get_sub_race(int race){
    switch(race)
    {
        case 6:
        {
            puts("Choose between the following (See Player's Handboook page 17):");
            printf("1.\tHill Dwarf\n2.\tMountain Dwarf\n3.\tShield Dwarves\n4.\tGold Dwarves\n5.\tGray Dwarves\n");
            puts("6.\tDuergar");
            puts("See Sword Coast Adventurer's Guide page 103 for options 3-6");
            return (get_int(1,6));
        }

        case 7:
        {
            puts("Choose between the following (See Player's Handboook page 17):");
            printf("1.\tHigh-Elf\n2.\tWood-Elf\n3.\tDark-Elf (Drow)\n4.\tMoon Elf\n");
            printf("5.\tSun Elf\n");
            puts("See Sword Coast Adventurer's Guide page 103 for optioins 2-5");
            return (get_int(1,5));
        }
        case 9:
        {
            puts("Choose between the following (See Elemental Evil Player's Companion page 3):");
            printf("1.\tAir Genasi\n2.\tEarth Genasi\n3.\tFire Genasi\n4.\tWater Genasi\n");
            return (get_int(1,4));
        }
        case 2:
        {
            puts("Choose between the following (See Volo's Guide to Monsters page 104):");
            printf("1.\tProtector Aasimar\n2.\tScourge Aasimar\n3.\tFallen Aasimar\n");
            return (get_int(1,3));
        }
        case 15:
        {
            puts("Choose between the following (See Player's Handboook page 17):");
            printf("1.\tStout\n2.\tLightfoot\n3.\tStrongheart\n");
            puts("See SwordCoast Adventurer's Guide page 103  for options 2-3");
            return (get_int(1,3));
        }
        case 4:
        {
            puts("Choose between the following ancestries(See Player's Handboook page 17):");
            printf("1.\tBlack\n2.\tBlue\n3.\tBrass\n4.\tBronze\n5.\tCopper\n6.\tGold\n7.\tGreen\n8.Red\n");
            printf("9.\tSilver\n10.\tWhite\n");
            return (get_int(1,10));
        }
        case 10:
        {
            puts("Choose between the following (See Player's Handboook page 17):");
            printf("1.\tForest Gnome\n2.\tRock Gnome\n3.\tDeep Gnome\n4.\tSvirfneblin\n");
            puts("See SwordCoast adventurer's Guide page page 103 for options 1-4");
            return (get_int(1,2));
        }
        default:
            return 0; // no sub-race in that race
    }
}

int four_d_6_drop_lowest(int stat_block[4]){
    int count, count2;  //used in for loops
    int temp;           //used to sort highest to lowest
    int dice[4];        //stores dice rolls
    
    for (count = 0; count<4; count++)
        dice[count]=dice_roll(6); //roll dice for stats
    
    for(count=0; count<4; count++) {
                for(count2=count+1; count2<4; count2++)
                {
                    if(dice[count] < dice[count2])
                    {
                        temp = dice[count];
                        dice[count] = dice[count2];
                        dice[count2] = temp;
                    }
                }
            }   //loops to sort from highest to lowest
        
    printf("You rolled: ");
    for (count =0; count<4; count++)
        printf("%d ", dice[count]); //displays dice results in order
        
    printf("After dropping %d, the total is: %d.\n", dice[3], dice[0]+dice[1]+dice[2]); //displays total
    return (dice[0]+dice[1]+dice[2]); //return total
}
void get_String(char new_string[], char string_type[]){
    int n, choice;
    char junk;
    do{
        fgets(new_string, SIZE, stdin);
        for (n=0; n<50 && new_string[n] != "\0";n++)
            if (new_string[n] == '\n')
                new_string[n] = '\0';// eliminates the newline character

        printf("You selected %s.", new_string);
        printf("\nUse this for your %s?\n1.\tyes\n2.\tno\n", string_type);
        choice = get_int(1,2);
        scanf("%c", &junk); //consumes newline
        if (choice ==2)
            printf("Enter your %s again: \n", string_type);

    }while (choice != 1);
}
