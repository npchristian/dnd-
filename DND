/**********5e Character creation and modificaiton module*********/

/*********** LIBRARIES ***********/

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include <stdbool.h>
#include <time.h>

/*********** GLOBAL VARIABLES ***********/
#define SIZE 50

/*********** DATA STRUCTURES ***********/
typedef struct {
	/*********** BASIC CHARACTER INFO***********/
	char name[SIZE];        //stores character name 
	char racename[SIZE];	//
	char subracename[SIZE]; //stores race & sub_race

	int level;              //stores character level
	int race;               //stores character race
	int subrace;
	int sub_class;          //stores int of sub_class

	/*********** CHARACTER STATS***********/
	int charisma;           //stores character charism
	int char_mod;           //stores character charisma mod
	int constitution;       //stores character constitution
	int con_mod;            //stores character constitution mod
	int dexterity;          //stores character dexterity
	int dex_mod;            //stores character dexterity mod
	int intelligence;       //stores character intelligence
	int intel_mod;          //stores character intelligence mod
	int strength;           //stores character strength
	int str_mod;            //stores character strength mod
	int wisdom;             //stores character wisdom
	int wis_mod;            //stores character wisdom mod

} Character;

/*********** FUNCTION HEADERS***********/

Character create_Character();							//generic call to create a character
Character get_Abilities(Character new_Char);			//gets the 5 stats for the character

//int Check_Abilities(Character new_character);           //checks that entered stats are correct
int dice_roll(int sides);                               //roles an n sided dice
int four_d_6_drop_lowest();                             //sorts four dice rolls, drops lowest, and sums remaining 3
int get_assignment(int score);							//used in the point buy process
int get_class(); //ADD CLASSES FROM OTHER BOOKS         //returns the class chosen by user
int get_int(int upper, int lower);						//returns an integer entered by user
int get_race(char myrace[SIZE], char mysubrace[SIZE],
			 int *sub_race);								//returns the race chosen by user
int get_Abil_Mods(int stat);                            //returns character stat mod for a given stat
int get_sub_race(int race);                             // get the sub race
int select_race();

void get_String(char new_string[], char string_type[]); //returns a string entered by user
void pause();
void print_class(int class);							//prints the class for user verification
void print_race(int race, int sub_race);				//prints the race and sub-race for user verificatioN
void sort_array(int arr_size, int arr[6]);

/*********** MAIN***********/
int main() {
	Character myCharacter;                                                                  //create a character
	puts("Welcome to the Dungeons and Dragons fifth edition character creation module.");   //welcome message
	myCharacter = create_Character();                                                       //character creation call
	return 0;
}

/*********** FUNCTION DEFINITIONS***********/

Character create_Character() {
	/*********** VARIABLE DECLARATIONS***********/
	char junk;					//consumes newline character
	Character new_Character;    //newly created character returned

	int choice =0;		            //stores user decision
	int* sub_race;				//used to 

	/********** GET THE STATS ******************/
	do {
		/*********** GET NAME ***********/
		if (choice == 0 || choice == 1) {
			puts("Please enter your character's name: ");
			get_String(new_Character.name, "character's name");
		}

		/*********** GET LEVEL*********/
		if (choice == 0 || choice == 2) {
			printf("What level will %s be (1-20)? ", new_Character.name);   //prompt for level
			new_Character.level = get_int(1, 20);                           //get level
		}

		/*********** GET RACE*********/
		if (choice == 0 || choice == 3)
			new_Character.race = get_race(new_Character.racename, new_Character.subracename, &new_Character.subrace);         //get race

			/*********** GET CLASS*********/
		if (choice == 0 || choice == 5)
		//	new_Character.class = get_class();                              //get class

		/*********** GET ABILITIES ***********/
		if (choice == 0 || choice == 6)
			new_Character = get_Abilities(new_Character);


		/********** PRINT FINAL STATS *******/
		//choice = get_int(print_Sats(new_Character));

	} while (choice != 7);

		return new_Character; //return newly created character

} //COMPLETE
Character get_Abilities(Character new_Char) {

	/*********** VARIABLE DECLARATIONS***********/

	bool stats_rolled = false;							//check if stats have already been rolled
	int rolled_stats[6], stats[6];						//stores user stats
	int method, roll_method, choice;					//stores user decisions
	int	reset;											//initialize reset to false
	int count, count2;									//used in for loops
	int temp;											//used to sort highest to lowest
	int points;											//used in the point buy system


	/*********** GET 6 ABILITIES***********/
	do {
		new_Char.charisma = new_Char.constitution = new_Char.dexterity = new_Char.intelligence = new_Char.strength = new_Char.wisdom = 0;
		puts("Which method would you like to use to compute your stats?\n Bonuses due to race and other factors will be added later.");
		printf("1.\tRoll for my stats\n2.\tPoint buy\n3.\tUse 15, 14, 13, 12, 10, 8\n");
		method = get_int(1, 3);

		switch (method) {

		case 1: {
			puts("We will begin by rolling your stats as if you were level 1. Stat modifiers due");
			puts("to level, race, and other factors will be added later. You may roll your dice");
			puts("(4d6 drop lowest) or the module can roll it for you. How would you like to");
			puts("compute your stats?");
			printf("1.\tI will roll and manually enter my stats\n2.\tRoll my dice for me\n");
			roll_method = get_int(1, 2);  //Explain program and ask for input

			if (roll_method == 1) {
				puts("Enter your charisma:");
				new_Char.charisma = get_int(3, 18);
				puts("Enter your Constitution:");
				new_Char.constitution = get_int(3, 18);
				puts("Enter your dexterity:");
				new_Char.dexterity = get_int(3, 18);
				puts("Enter your intelligence:");
				new_Char.intelligence = get_int(3, 18);
				puts("Enter your strenth:");
				new_Char.strength = get_int(3, 18);
				puts("Enter your wisdom:");
				new_Char.wisdom = get_int(3, 18);
			} //prompt user for the stats

			else {
				if (!stats_rolled) {										//if stats have not already been rolled
					srand(time(NULL));										//seed with time and rolla gain
					for (count = 0; count < 6; count++)
						rolled_stats[count] = four_d_6_drop_lowest();
					stats_rolled = true;
				}

				new_Char.charisma = new_Char.constitution = new_Char.dexterity = new_Char.intelligence = new_Char.strength = new_Char.wisdom = 0;

				sort_array(6, rolled_stats);
				puts("We will assign your stats from highest to lowest:");
				count = 0;      //initialize values to zero
				while (count < 6) {
					printf("Where will you assign your %d roll?\n", rolled_stats[count]);
					printf("1.\tCharisma\n2.\tConstitution\n3.\tDexterity\n4.\tIntelligence\n5.\tStrength\n6.\tWisdom\n");
					//prompt user for stat selections

					choice = get_int(1, 6);

					switch (choice) {
					case 1:
						if (new_Char.charisma == 0) {
							new_Char.charisma = rolled_stats[count];
							count++;
						}
						else
							printf("Error: charisma already given value: %d.\n", new_Char.charisma);
						break;
					case 2:
						if (new_Char.constitution == 0) {
							new_Char.constitution = rolled_stats[count];
							count++;
						}
						else
							printf("Error: constitution already given value: %d.\n", new_Char.constitution);
						break;
					case 3:
						if (new_Char.dexterity == 0) {
							new_Char.dexterity = rolled_stats[count];
							count++;
						}
						else
							printf("Error: dexterity already given value: %d.\n", new_Char.dexterity);
						break;
					case 4:
						if (new_Char.intelligence == 0) {
							new_Char.intelligence = rolled_stats[count];
							count++;
						}
						else
							printf("Error: intelligence already given value: %d.\n", new_Char.intelligence);
						break;
					case 5:
						if (new_Char.strength == 0) {
							new_Char.strength = rolled_stats[count];
							count++;
						}
						else
							printf("Error: strength already given value: %d.\n", new_Char.strength);
						break;
					case 6:
						if (new_Char.wisdom == 0) {
							new_Char.wisdom = rolled_stats[count];
							count++;
						}
						else
							printf("Error: wisdom already given value: %d.\n", new_Char.wisdom);
						break;
					}
				}
			}
			break; }
		case 2: {
			points = 27;
			count = 0;
			puts("You have a total of 27 points to spend on your ability scores. The cost of each is displayed below. ");
			while (count < 6) {
				printf("You have %d points left\nWhat would you like to buy?\n", points);
				printf("SELECTION\tSCORE\tCOST\n1.\t\t8\t0\n2.\t\t9\t1\n3.\t\t10\t2\n4.\t\t11\t3\n5.\t\t12\t4\n6.\t\t13\t5\n7.\t\t14\t6\n");
				printf("8.\t\t15\t7\n");
				choice = get_int(1, 8);
				switch (choice) {
				case 1:
					switch (get_assignment(8)) {
					case 1:
						if (new_Char.charisma == 0) {
							new_Char.charisma = 8;
							count++;
						}
						else
							printf("Error: charisma already given value: %d.\n", new_Char.charisma);
						break;
					case 2:
						if (new_Char.constitution == 0) {
							new_Char.constitution = 8;
							count++;
						}
						else
							printf("Error: constitution already given value: %d.\n", new_Char.constitution);
						break;
					case 3:
						if (new_Char.dexterity == 0) {
							new_Char.dexterity = 8;
							count++;
						}
						else
							printf("Error: dexterity already given value: %d.\n", new_Char.dexterity);
						break;
					case 4:
						if (new_Char.intelligence == 0) {
							new_Char.intelligence = 8;
							count++;
						}
						else
							printf("Error: intelligence already given value: %d.\n", new_Char.intelligence);
						break;
					case 5:
						if (new_Char.strength == 0) {
							new_Char.strength = 8;
							count++;
						}
						else
							printf("Error: strength already given value: %d.\n", new_Char.strength);
						break;
					case 6:
						if (new_Char.wisdom == 0) {
							new_Char.wisdom = 8;
							count++;
						}
						else
							printf("Error: wisdom already given value: %d.\n", new_Char.wisdom);
						break;
					}
					break;
				case 2: {
					if (points < 1)
						printf("Error: a score of 9 costs 1 point. You have no points left.\n");
					else {
						switch (get_assignment(9)) {
						case 1:
							if (new_Char.charisma == 0) {
								new_Char.charisma = 9;
								points = points - 1;
								count++;
							}
							else
								printf("Error: charisma already given value: %d.\n", new_Char.charisma);
							break;
						case 2:
							if (new_Char.constitution == 0) {
								new_Char.constitution = 9;
								points = points - 1;
								count++;
							}
							else
								printf("Error: constitution already given value: %d.\n", new_Char.constitution);
							break;
						case 3:
							if (new_Char.dexterity == 0) {
								new_Char.dexterity = 9;
								points = points - 1;
								count++;
							}
							else
								printf("Error: dexterity already given value: %d.\n", new_Char.dexterity);
							break;
						case 4:
							if (new_Char.intelligence == 0) {
								new_Char.intelligence = 9;
								points = points - 1;
								count++;
							}
							else
								printf("Error: intelligence already given value: %d.\n", new_Char.intelligence);
							break;
						case 5:
							if (new_Char.strength == 0) {
								new_Char.strength = 9;
								points = points - 1;
								count++;
							}
							else
								printf("Error: strength already given value: %d.\n", new_Char.strength);
							break;
						case 6:
							if (new_Char.wisdom == 0) {
								new_Char.wisdom = 9;
								points = points - 1;
								count++;
							}
							else
								printf("Error: wisdom already given value: %d.\n", new_Char.wisdom);
							break;
						}
						break;
					}
					break; }
				case 3: {
					if (points < 2)
						printf("Error: a score of 10 costs 2 points. You only have %d points.\n", points);
					else {
						switch (get_assignment(10)) {
						case 1:
							if (new_Char.charisma == 0) {
								new_Char.charisma = 10;
								points = points - 2;
								count++;
							}
							else
								printf("Error: charisma already given value: %d.\n", new_Char.charisma);
							break;
						case 2:
							if (new_Char.constitution == 0) {
								new_Char.constitution = 10;
								points = points - 2;
								count++;
							}
							else
								printf("Error: constitution already given value: %d.\n", new_Char.constitution);
							break;
						case 3:
							if (new_Char.dexterity == 0) {
								new_Char.dexterity = 10;
								points = points - 2;
								count++;
							}
							else
								printf("Error: dexterity already given value: %d.\n", new_Char.dexterity);
							break;
						case 4:
							if (new_Char.intelligence == 0) {
								new_Char.intelligence = 10;
								points = points - 2;
								count++;
							}
							else
								printf("Error: intelligence already given value: %d.\n", new_Char.intelligence);
							break;
						case 5:
							if (new_Char.strength == 0) {
								new_Char.strength = 10;
								points = points - 2;
								count++;
							}
							else
								printf("Error: strength already given value: %d.\n", new_Char.strength);
							break;
						case 6:
							if (new_Char.wisdom == 0) {
								new_Char.wisdom = 10;
								points = points - 2;
								count++;
							}
							else
								printf("Error: wisdom already given value: %d.\n", new_Char.wisdom);
							break;
						}
					}
					break; }
				case 4: {
					if (points < 3)
						printf("Error: a score of 11 costs 3 points. You only have %d points.\n", points);
					else {
						switch (get_assignment(11)) {
						case 1:
							if (new_Char.charisma == 0) {
								new_Char.charisma = 11;
								points = points - 3;
								count++;
							}
							else
								printf("Error: charisma already given value: %d.\n", new_Char.charisma);
							break;
						case 2:
							if (new_Char.constitution == 0) {
								new_Char.constitution = 11;
								points = points - 3;
								count++;
							}
							else
								printf("Error: constitution already given value: %d.\n", new_Char.constitution);
							break;
						case 3:
							if (new_Char.dexterity == 0) {
								new_Char.dexterity = 11;
								points = points - 3;
								count++;
							}
							else
								printf("Error: dexterity already given value: %d.\n", new_Char.dexterity);
							break;
						case 4:
							if (new_Char.intelligence == 0) {
								new_Char.intelligence = 11;
								points = points - 3;
								count++;
							}
							else
								printf("Error: intelligence already given value: %d.\n", new_Char.intelligence);
							break;
						case 5:
							if (new_Char.strength == 0) {
								new_Char.strength = 11;
								points = points - 3;
								count++;
							}
							else
								printf("Error: strength already given value: %d.\n", new_Char.strength);
							break;
						case 6:
							if (new_Char.wisdom == 0) {
								new_Char.wisdom = 11;
								points = points - 3;
								count++;
							}
							else
								printf("Error: wisdom already given value: %d.\n", new_Char.wisdom);
							break;
						}
					}
					break; }
				case 5: {
					if (points < 4)
						printf("Error: a score of 12 costs 4 points. You only have %d points.\n", points);
					else {
						switch (get_assignment(12)) {
						case 1:
							if (new_Char.charisma == 0) {
								new_Char.charisma = 12;
								points = points - 4;
								count++;
							}
							else
								printf("Error: charisma already given value: %d.\n", new_Char.charisma);
							break;
						case 2:
							if (new_Char.constitution == 0) {
								new_Char.constitution = 12;
								points = points - 4;
								count++;
							}
							else
								printf("Error: constitution already given value: %d.\n", new_Char.constitution);
							break;
						case 3:
							if (new_Char.dexterity == 0) {
								new_Char.dexterity = 12;
								points = points - 4;
								count++;
							}
							else
								printf("Error: dexterity already given value: %d.\n", new_Char.dexterity);
							break;
						case 4:
							if (new_Char.intelligence == 0) {
								new_Char.intelligence = 12;
								points = points - 4;
								count++;
							}
							else
								printf("Error: intelligence already given value: %d.\n", new_Char.intelligence);
							break;
						case 5:
							if (new_Char.strength == 0) {
								new_Char.strength = 12;
								points = points - 4;
								count++;
							}
							else
								printf("Error: strength already given value: %d.\n", new_Char.strength);
							break;
						case 6:
							if (new_Char.wisdom == 0) {
								new_Char.wisdom = 12;
								points = points - 4;						points = points - 4;
								count++;
							}
							else
								printf("Error: wisdom already given value: %d.\n", new_Char.wisdom);
							break;
						}
					}
					break; }
				case 6: {
					if (points < 5)
						printf("Error: a score of 13 costs 5 points. You only have %d points.\n", points);
					else {
						switch (get_assignment(13)) {
						case 1:
							if (new_Char.charisma == 0) {
								new_Char.charisma = 13;
								points = points - 5;
								count++;
							}
							else
								printf("Error: charisma already given value: %d.\n", new_Char.charisma);
							break;
						case 2:
							if (new_Char.constitution == 0) {
								new_Char.constitution = 13;
								points = points - 5;
								count++;
							}
							else
								printf("Error: constitution already given value: %d.\n", new_Char.constitution);
							break;
						case 3:
							if (new_Char.dexterity == 0) {
								new_Char.dexterity = 13;
								points = points - 5;
								count++;
							}
							else
								printf("Error: dexterity already given value: %d.\n", new_Char.dexterity);
							break;
						case 4:
							if (new_Char.intelligence == 0) {
								new_Char.intelligence = 13;
								points = points - 5;
								count++;
							}
							else
								printf("Error: intelligence already given value: %d.\n", new_Char.intelligence);
							break;
						case 5:
							if (new_Char.strength == 0) {
								new_Char.strength = 13;
								points = points - 5;
								count++;
							}
							else
								printf("Error: strength already given value: %d.\n", new_Char.strength);
							break;
						case 6:
							if (new_Char.wisdom == 0) {
								new_Char.wisdom = 13;
								points = points - 5;
								count++;
							}
							else
								printf("Error: wisdom already given value: %d.\n", new_Char.wisdom);
							break;
						}
					}
					break; }
				case 7: {
					if (points < 7)
						printf("Error: a score of 14 costs 7 points. You only have %d points.\n", points);
					else {
						switch (get_assignment(14)) {
						case 1:
							if (new_Char.charisma == 0) {
								new_Char.charisma = 14;
								points = points - 7;
								count++;
							}
							else
								printf("Error: charisma already given value: %d.\n", new_Char.charisma);
							break;
						case 2:
							if (new_Char.constitution == 0) {
								new_Char.constitution = 14;
								points = points - 7;
								count++;
							}
							else
								printf("Error: constitution already given value: %d.\n", new_Char.constitution);
							break;
						case 3:
							if (new_Char.dexterity == 0) {
								new_Char.dexterity = 14;
								points = points - 7;
								count++;
							}
							else
								printf("Error: dexterity already given value: %d.\n", new_Char.dexterity);
							break;
						case 4:
							if (new_Char.intelligence == 0) {
								new_Char.intelligence = 14;
								points = points - 7;
								count++;
							}
							else
								printf("Error: intelligence already given value: %d.\n", new_Char.intelligence);
							break;
						case 5:
							if (new_Char.strength == 0) {
								new_Char.strength = 14;
								points = points - 7;
								count++;
							}
							else
								printf("Error: strength already given value: %d.\n", new_Char.strength);
							break;
						case 6:
							if (new_Char.wisdom == 0) {
								new_Char.wisdom = 14;
								points = points - 7;
								count++;
							}
							else
								printf("Error: wisdom already given value: %d.\n", new_Char.wisdom);
							break;
						}
					}
					break; }
				case 8:
					if (points < 9)
						printf("Error: a score of 15 costs 9 points. You only have %d points.\n", points);
					else {

						switch (get_assignment(15)) {
						case 1:
							if (new_Char.charisma == 0) {
								new_Char.charisma = 15;
								points = points - 9;
								count++;
							}
							else
								printf("Error: charisma already given value: %d.\n", new_Char.charisma);
							break;
						case 2:
							if (new_Char.constitution == 0) {
								new_Char.constitution = 15;
								points = points - 9;
								count++;
							}
							else
								printf("Error: constitution already given value: %d.\n", new_Char.constitution);
							break;
						case 3:
							if (new_Char.dexterity == 0) {
								new_Char.dexterity = 15;
								points = points - 9;
								count++;
							}
							else
								printf("Error: dexterity already given value: %d.\n", new_Char.dexterity);
							break;
						case 4:
							if (new_Char.intelligence == 0) {
								new_Char.intelligence = 15;
								points = points - 9;
								count++;
							}
							else
								printf("Error: intelligence already given value: %d.\n", new_Char.intelligence);
							break;
						case 5:
							if (new_Char.strength == 0) {
								new_Char.strength = 15;
								points = points - 9;
								count++;
							}
							else
								printf("Error: strength already given value: %d.\n", new_Char.strength);
							break;
						case 6:
							if (new_Char.wisdom == 0) {
								new_Char.wisdom = 15;
								points = points - 9;
								count++;
							}
							else
								printf("Error: wisdom already given value: %d.\n", new_Char.wisdom);
							break;
						}
					}
					break;
				}
			}
			break; }
		case 3:
			count = 0;
			stats[0] = 15; stats[1] = 14; stats[2] = 13; stats[3] = 12; stats[4] = 10; stats[5] = 8;
			while (count < 6) {
				printf("Where will you assign your %d roll?\n", stats[count]);
				printf("1.\tCharisma\n2.\tConstitution\n3.\tDexterity\n4.\tIntelligence\n5.\tStrength\n6.\tWisdom\n");
				//prompt user for stat selections

				choice = get_int(1, 6);

				switch (choice) {
				case 1:
					if (new_Char.charisma == 0) {
						new_Char.charisma = stats[count];
						count++;
					}
					else
						printf("Error: charisma already given value: %d.\n", new_Char.charisma);
					break;
				case 2:
					if (new_Char.constitution == 0) {
						new_Char.constitution = stats[count];
						count++;
					}
					else
						printf("Error: constitution already given value: %d.\n", new_Char.constitution);
					break;
				case 3:
					if (new_Char.dexterity == 0) {
						new_Char.dexterity = stats[count];
						count++;
					}
					else
						printf("Error: dexterity already given value: %d.\n", new_Char.dexterity);
					break;
				case 4:
					if (new_Char.intelligence == 0) {
						new_Char.intelligence = stats[count];
						count++;
					}
					else
						printf("Error: intelligence already given value: %d.\n", new_Char.intelligence);
					break;
				case 5:
					if (new_Char.strength == 0) {
						new_Char.strength = stats[count];
						count++;
					}
					else
						printf("Error: strength already given value: %d.\n", new_Char.strength);
					break;
				case 6:
					if (new_Char.wisdom == 0) {
						new_Char.wisdom = stats[count];
						count++;
					}
					else
						printf("Error: wisdom already given value: %d.\n", new_Char.wisdom);
					break;
				}
			}
			break;
		}
		reset = check_Abilities(new_Char);
	} while (reset == 2);

	return new_Char; //return the new character & stats.
} //COMPLETE

int check_Abilities(Character new_character) {
	printf("%s's stats are:\n", new_character.name);
	printf("Charisma:\t%d\n", new_character.charisma);
	printf("Constitution:\t%d\n", new_character.constitution);
	printf("Dexterity:\t%d\n", new_character.dexterity);
	printf("Intelligence:\t%d\n", new_character.intelligence);
	printf("Strength:\t%d\n", new_character.strength);
	printf("Wisdom:\t\t%d\n", new_character.wisdom);
	printf("Is this correct?\n1.\tYes.\n2.\tNo\n");
	return (get_int(1, 2));  //print stats, ask if they are correct, and return the answer
} //COMPLETE
int dice_roll(int sides) {
	return (1 + rand() % (sides + 1 - 1));
} //COMPLETE
int get_assignment(int score) {
	printf("Where will you assign your %d?\n", score);
	printf("1.\tCharisma\n2.\tConstitution\n3.\tDexterity\n4.\tIntelligence\n5.\tStrength\n6.\tWisdom\n");
	//prompt user for stat selections
	return(get_int(1, 6));
} //COMPLETE
int get_class() {
	/*********** GET CLASS ***********/
	puts("What class will you play?");
	printf("1.\tBarbarian\n2.\tBard\n3.\tCleric\n4.\tDruid\n5.\tFighter\n");
	printf("6.\tMonk\n7.\tPaladin\n8.\tRanger\n9.\tSorcerer\n10.\tWarlock\n11.\tWizard\n");
	return (get_int(1, 11));
} //add classes from other resources & more information
//int get_class_name(int class) //implent this
int get_int(int lower, int upper){
	int choice;
	char junk;
	bool flag = true;

	while (flag) {
		if (scanf("%d", &choice)) {
			if (choice > upper || choice < lower)
			{
				printf("Error: restrict input to %d - %d.\n", lower, upper);
				printf("Try again: ");
			}
			else
			{
				printf("\n");
				flag = false;
			}
		}
		else
		{
			scanf("%c", &junk); //consumes the char mistakenly entered
			printf("Error: restrict input to an integer (1, 2, 3, etc.)\n");
		}
	}
	return choice;
} //COMPLETE
int get_race(char myrace[SIZE], char mysubrace[SIZE], int *sub_race){

	/*********** FUNCTION INFORMATION***********
	* PRINTS LIST OF RACES, USER SELECTS OR ASKS FOR MORE INFO
	* PRINTS MORE INFORMATION IN LOOP UNTIL USER IS READY
	*

	* RETURNS AN INTEGER CORRESPONDING TO THAT RACE AND SETS THE RACE NAME TO AN ARRAY PASSED TO FUNCTION

	* DO 1: LOOPS UNTIL USER SELECTS THE "IM READY" OPTION
	* SWITCH 1: PRINTS INFORMATION BASED ON USER CHOICE (INFO ON RACES)


	/*********** VARIABLE DECLARATIONS***********/
	int choice_race, choice_info, choice_sub; //used to read user input
	bool choice_made;

	/*********** GET RACE ***********/
	do {
		choice_info = 0;
		choice_made = false;

		{printf("what race will you play? races marked with an * may not be allowed consult your DM\n");
		printf("1.\t*Aarakocra\t16.\tHalf-Orc\n2.\t*Aasimar\t17.\tHuman\n3.\t*Bugbear\t18.\t*Human, Variant\n4.\t*Changeling\t19.\t*Kenku\n5.\tDragonborn");
		printf("\t20.\t*Kobold\n6.\tDwarf\t\t21.\t*Lizardfolk\n7.\tElf\t\t22.\t*Minotaur\n8\t*Firbolg\t23.\t*Orc\n9.\t*Genasi\t\t24.\t*Shifter\n10.\tGnome");
		printf("\t\t25.\t* Tabaxi\n11.\t* Goblin\t26.\tTiefling\n12.\t* Goliath\t27.\t*triton\n13.\t*Hobgoblin\t28.\t*Warforged\n14.\tHalf-Elf\t29.\tYuan-ti Pureblood\n");
		printf("15.\tHalfling\t30.\tI need more info\n");
		choice_race = get_int(1, 30); }
		//PRINT STATEMENT TO GET RACE
		while (choice_race == 30 && choice_info != 7) {
			{puts("What would you like to know more about?:");
			puts("1. ability modifications (strength, con, etc.)");
			puts("2. racial properties (age, size, speed)");
			puts("3. cantrips, feats, and spells");
			puts("4. Languages");
			puts("5. special features (attacks, breath weapon, etc.)");
			puts("6. where to find more information");
			puts("7. I'm ready to choose");
			choice_info = get_int(1, 7); }
			//print menu 2 get decision 2

			switch (choice_info) { //SWITCH 1
    			case 1: {
    				printf("\t\tCHARISMA\tCON\tDEX\tINT\tSTR\tWIS\n");
    				printf("Aarakocra\t\t0\t0\t+2\t0\t0\t\1\n");
    				printf("Aasimar, Fallen\t\t0\t\t0\t0\t0\t+1\t0\n");
    				printf("Aasimar, Protctor\t\t0\t0\t0\t0\t0\t+1\n");
    				printf("Aasimar, Revenant\t\t0\t+1\t0\t0\t0\t0\n");
    				printf("Aasimar, Scourge\t\t0\t+1\t0\t0\t0\t0\n");
    				printf("Bugbear\t\t0\t0\t+1\t0\t+2\t0\n");
    				printf("Changeling\t\t+1\t0\t+1\t0\t0\t0\n");
    				printf("Dragonborn\t\t+1\t0\t0\t0\t+2\t0\n");
    				printf("Dragonborn, Revenant\t\t+1\t0\t0\t0\t+1\t0\n");
    				printf("Dwarf, Gold\t\t0\t+2\t0\t0\t0\t+1\n");
    				printf("Dwarf, Gray\t\t0\t+2\t0\t0\t+1\t0\n");
    				printf("Dwarf, Hill\t\t0\t+2\t0\t0\t0\t+1\n");
    				printf("Dwarf, Mountain\t\t0\t+2\t0\t0\t+2\t0\n");
    				printf("Dwarf, Revenant\t\t0\t+1\t0\t0\t0\t0\n");
    				printf("Dwarf, Shield\t\t0\t+2\t0\t0\t+2\t0\n");
    				printf("Elf, Dark\t\t+1\t0\t+2\t0\t0\t0\n");
    				printf("Elf, High\t\t0\t0\t+2\t+1\t0\t0\n");
    				printf("Elf, Moon\t\t0\t0\t+2\t+1\t0\t0\n");
    
    				pause();
    				printf("\t\tCHARISMA\tCON\tDEX\tINT\tSTR\tWIS\n");
    				printf("Elf, Revenant\t\t0\t1\t0\t0\t0\n");
    				printf("Elf, Sun\t\t0\t0\t+2\t+1\t0\t0\n");
    				printf("Elf, Wood\t\t0\t0\t+2\t0\t0\t+1\n");
    				printf("Firbolg\t\t0\t0\t0\t0\t+1\t+2\n");
    				printf("Genasi, Air\t\t0\t+2\t+1\t0\t0\t0\n");
    				printf("Genasi, Earth\t\t0\t+2\t0\t0\t+1\t0\n");
    				printf("Genasi, Fire\t\t0\t+2\t0\t+1\t0\t0\n");
    				printf("Genasi, Revenant\t\t0\t+1\t0\t0\t0\t0\n");
    				printf("Genasi, Water\t\t0\t+2\t0\t0\t0\t+1\n");
    				printf("Deep Gnome\t\t0\t0\t+1\t+2\t0\t0\n");
    				printf("Gnome, Forest\t\t0\t0\t+1\t+2\t0\t0\n");
    				printf("Gnome, Revenant\t\t0\t+1\t0\t0\t0\t0\n");
    				printf("Gnome, Rock\t\t0\t+1\t0\t+2\t0\t0\n");
    				printf("Gnome, Svirfneblin\t\t0\t0\t0\t+2\t0\t0\n");
    				printf("Goblin\t\t0\t+1\t+2\t0\t0\t0\n");
    				printf("Goliath\t\t0\t+1\t0\t0\t+2\t0\n");
    				printf("Hobgoblin\t\t0\t+2\t0\t+1\t0\t0\n");
    				printf("Half-Elf\t\t+2\t0\t0\t0\t0\t0->Choose two different abilities to increase by one\n");
    				printf("Halfling, Lightfoot\t\t+1\t0\t+2\t0\t0\t0\n");
    				printf("Halfling, Stout\t\t0\t+1\t+2\t0\t0\t0\n");
    
    				pause();
    				puts("\t\tCHARISMA\tCON\tDEX\tINT\tSTR\tWIS");
    				printf("Halfling, Strongheart\t\t0\t+1\t+2\t0\t0\t0\n");
    				printf("Halfling, Revenant\t\t0\t+1\t0\t0\t0\t0\n");
    				printf("Half-Elf\t\t2\t0\t0\t0\t0\t0 -> increase two abilities of your choice by 1 each\n");
    				printf("Half-Orc\t\t0\t+1\t0\t0\t+2\t0\n");
    				printf("Human\t\t+1\t+1\t+1\t+1\t+1\t+1\n");
    				printf("Human, Revenant\t\tChoose two different abilities to increase, lose skills and feats from human variant (if applicable)\n");
    				printf("Human, Variant\t\t0\t0\t0\t0\t0\t0->Choose two different abilities to increase by one\n");
    				printf("Kenku\t\t0\t0\t+2\t0\t0\t+1\n");
    				printf("Kobold\t\t0\t0\t+2\t0\t-2\t0\n");
    				printf("Lizardfolk\t\t0\t+2\t0\t0\t0\t+1\n");
    				printf("MInotaur\t\t0\t0\t0\t0\t0\t+1\t0\n");//
    				printf("Orc\t\t0\t+1\t0\t-2\t+2\t0\n");
    				printf("Shifter, Beasthide\t\t0\t+1\t+1\t0\t0\t0\n");//
    				printf("Shifter, Cliffwalk\t\t0\t0\t+2\t0\t0\t0\n");//
    				printf("Shifter, Longstride\t\t0\t0\t+2\t0\t0\t0\n");//
    				printf("Shifter, Longtooth\t\t0\t0\t+1\t0\t+1\t0\n");//
    				printf("Shifter, Razorclaw\t\t0\t0\t+2\t0\t0\t0\n");
    				printf("Shifter, Revenant\t\t0\t+1\t0\t0\t0\t0\n");
    				printf("Shifter, Wildhunt\t\t0\t0\t+1\t0\t0\t+1");
    				printf("Tabaxi\t\t+1\t0\t+2\t0\t0\t0\n");
    
    				pause();
    				puts("\t\tCHARISMA\tCON\tDEX\tINT\tSTR\tWIS");
    				printf("Tiefling\t\t+2\t0\t0\t+1\t0\t0\n");
    				printf("Tiefling, Abyssal\t\t0\t+2\t0\t0\t0\t0\n");
    				printf("Tiefling, Infernal\t\t0\t+1\t0\t+1\t0\t0\n");
    				printf("Triton\t\t+1\t+1\t0\t0\t+1\t0\n");
    				printf("Warforged\t\t0\t+1\t0\t0\t+1\t0");//
    				printf("Yuan-Ti Pureblood\t\t+2\t0\t0\t+1\t0\t0\n");
    				break; } //end case 1 race abilities
    			case 2: {
    				printf("RACE\t\t\tAGE\tALIGMENT\tSIZE\tSPEED\tSIGHT\n");
    				printf("Aarakocra\t\t\t3-30\tgood\tmedium\t25, 50(fly)\tnormal ->cannot fly while wearing heavy or medium armor\n");
    				printf("Aasimar\t\t\t18-160\tvaries\tmedium\t30\tdarkvision\n");
    				printf("Bugbear\t\t\t16-80\tvaries\medium\t30\tdarkvision\n");
    				printf("Changeling\t\t\tnot provided\tvaries\tmedium\t30\tnormal\n");
    				printf("Deep Gnome\t\t\t18-250\tvaries\tsmall\t25\tsuperior darkvision\n");
    				printf("Dragonborne\t\t\t15=80\tvaries\tmedium\t30\tnormal\n");
    				printf("Dwarf, all\t\t\t18-350\tvaries\tmedium\t25\tdarkvision\n");
    				printf("Dwarf, Gray\t\t\t18-350\tvaries\tmedium\t25\tSuperior darkvision\n");
    				printf("Elf, all\t\t\t100-350\tvaries\tmedium\t30\darkvision\n");
    				printf("Elf, Dark\t\t\t100-350\tvaries\tmedium\t30\superior darkvision\n");
    				printf("Firbolg\t\t\t50-500\tvaries\tmedium\t30\tnormal\n");
    				printf("Genasi, all\t\t\t18-120\tvaries\tmedium\t30\tnormal\n");
    				printf("Genasi, Fire\t\t\t18-120\tvaries\tmedium\t30\tdarkvision\n");
    				printf("Genasi, Water\t\t\t18-120\tvaries\tmedium\t30, 30 (swim)\tnormal\n");
    				printf("Gnome, all\t\t\t18-500\tvaries\tsmall\t25\tdarkvision\n");
    				printf("Gnome, Svifneblin\t\t\t18-500\tvaries\tsmall\t25\tsuperior darkvision\n");
    				printf("Goblin\t\t\t8-60\tvaries\tsmall\t30\tdarkvision\n");
    				printf("Goliath\t\t\t18-70\tvaries\tmedium\t30\tnormal\n");
    				printf("Halfling\t\t\t20-250\tvaries\tsmall\t25\tnormal\n");
    				printf("Half-Elf\t\t\t20-180\tvaries\tmedium\t30\tdarkvision\n");
    				printf("Half-Orc\t\t\t40-75\tvaries\tmedium\t30\tdarkvision\n");
    				printf("Hobgoblin\t\t\t19-75\tvaries\tmedium\t30\tdarkvision\n");
    				printf("Human\t\t\t18-75\tvaries\tmedium\t30\tnormal\n");
    				printf("Kenku\t\t12-60\tvaries\tmedium\t30\tnormal\n");
    				printf("Kobold\t\t6-120\tvaries\tsmall\t30\tdarkvision\n");
    				printf("Lizardfolk\t\t14-60\tvaries\tmedium\t30\tnormal\n");
    				printf("Orc\t\t12-50\tvaries\tmedium\t30\tdarkvision\n");
    				printf("Tabaxi\t\t18-75\tvaries\tmedium\t30, 20 (climb)\tdarkvision\n");
    				printf("Tiefling\t\t18-80\tvaries\tmedium\t30\tdarkvision\n");
    				printf("Triton\t\t15-200\tvaries\tmedium\t30, 30 (swim)\tnormal\n");
    				printf("Yuan-Ti Pureblood\t18-75\tvaries\tmedium\t30\tdarkvision\n");
    				break;
    			}
    			case 3: {
    				printf("Aasimar\t\tLight Cantrip - Charisma is the spellcasting abilitly\n");
    				printf("Dwarf, Gray\t\tEnlarge/Reduce - learned: level 3 | limitations: only the enlarge option, only targets self, cannot cast in direct sunlight\n");
    				printf("\t\t| material components not needed | recharges: long rest | spellcasting ability: intel\n");
    				printf("Dwarf, Gray\t\tInvisibility - learned: level 5 | limitations: only targets self, cannot cast in direct sunlight | spellcasting ability: intel |\n");
    				printf("\t\trecharges: long rest\n");
    				printf("Elf, Dark\t\tDancing Lights - spellcasting ability: charisma\n");
    				printf("Elf, Dark\t\tFaerie Fire - recharges: long rest | spellcasting ability: charisma\n");
    				printf("Elf, Dark\t\tDarkness - recharges: long rest | spellcasting ability: charisma\n");
    				printf("Elf, High\t\tselect one cantrip from the Wizard's spell list | Spellcasting ability: intel\n");
    				printf("Firbolg\t\tDetect Magic - recharges: short rest | spellcasting ability: wisdom\n");
    				printf("Firbolg\t\tDisguise Self - recharges: short rest | spellcasting ability: wisdom | when used, you can seem up to 3 feet shorter than normal\n");
    				printf("Genasi, Air\t\tLevitate - recharges: long rest | spellcasting ability: constitution | requires no material components\n");
    				printf("Geansi, Earth\t\tPass Without Trace - recharges: long rest | spellcasting ability: constitution | requires no components\n");
    				printf("Genasi, Fire\t\tBurning Hands - learned: level 3 | recharges: long rest | spellcasting ability: constitution\n");
    				printf("Genasi, Fire\t\tProduce Flame\n");
    				printf("Genasi, Water\t\tShape Water\n");
    				printf("Genasi, Water\t\tCreate or Destroy Water - learned: level 3 | recharges: long rest | spellcasting ability: constitution\n");
    				printf("Gnome, Forest\t\tMinor Illusion - spellcasting ability: intelligence\n");
    				printf("Tiefling\t\tthaumaturgy - spellcasting ability: chemistry\n");
    				printf("Tiefling\t\tHellish Rebuke - learned: level 3 | recharges: sunrise | spell level: 2 | spellcasting abilty: charisma\n");
    				printf("Tiefling\t\tDarkness - learned: level 5 | recharges: sunrise | spellcasting ability: charisma\n");
    				printf("Tiefling, Abyssal\t\tRandom Cantrips and Spells | after each long rest you gain random spells and cantrips as outlined\n");
    				printf("\tin Codex: Unearthed Arcana page 10\n");
    				printf("Tiefling, Infernal\t\tthaumaturgy - spellcasting ability: chemistry\n");
    				printf("Tiefling, Infernal\t\tHellish Rebuke - learned: level 3 | recharges: sunrise | spell level: 2 | spellcasting abilty: charisma\n");
    				printf("Tiefling, Infernal\t\tDarkness - learned: level 5 | recharges: sunrise | spellcasting ability: charisma\n");
    				printf("Triton\t\tControl Air and Water - you can cast one of the following spells per long rest\n");
    				printf("\tFog Cloud - recharges: long rest | spellcasting ability: charisma\n");
    				printf("\tGust of Wind - recharges: long rest | learned: level 3\n");
    				printf("\tWall of Water - learned: level 5 recharges: long rest | spellcasting ability charisma\n");
    				printf("Yuan-ti Pureblood\tPoison Spray\n");
    				printf("Yuan-ti Pureblood\tAnimal Friendship - limitation: target only snakes | spellcasting ability: charisma\n");
    				printf("\tcan be cast an unlimited number of times\n");
    				printf("Yuan-ti Pureblood\tSuggestion - recharges | long rest | spellcasting ability: charisma");
    				
    
    				
    				break; }
    			case 4: {
    				printf("Aarakocra\t\tspeak, read, and write Common, Aarakocra, and Auran\n");
    				printf("Aasimar,all\t\tspeak, read, and write Common and Celestial\n");
    				printf("Bugbear\t\tspeak, read, and write Common and Goblin\n");
    				printf("Changeling\t\tspeak, read, and write Common and two other languages of your choice");
    				printf("Dragonborn\t\tspeak, read, and write Common and Draconic\n");
    				printf("Dwarf, all\t\tspeak, read, and write Common, and Dwarf\n");
    				printf("Dwarf, all\t\tspeak, read, and write Common, Dwarf, and Undercommon\n");
    				printf("Elf, all\t\tspeak, read, and write Common, and Elvish\n");
    				printf("Elf, High\t\tspeak, read, and write Common, Elvish, and one extra language of your choice\n");
    				printf("Firbolg\t\tspeak, read, and write Common, Elvish, and Giant\n");
    				printf("Genasi\t\tspeak, read, and write Common and Primordial\n");
    				printf("Gnome, all\t\tspeak, read, and write Common and Gnomish\n");
    				printf("Gnome, Svirfneblin\t\tspeak, read, and write Common, Gnomish, and Undercommon\n");
    				printf("Goblin\t\tspeak, read, and write Common and Goblin\n");
    				printf("Goliath\t\tspeak, read, and write Common and Giant\n");
    				printf("Halfling\t\tspeak, read, and write Common and Halfling\n");
    				printf("Half-Elf\t\tspeak, read, and write Common, Elvish, and one more of your choice");
    				printf("Half-Orc\t\tspeak, read, and write Common and Orc\n");
    				printf("Hobgoblin\t\tspeak, read, and write Common and Goblin\n");
    				printf("Human\t\tspeak, read, and write Common and one extra language of your choice\n");
    				printf("Human, Variant\t\tspeak, read, and write Common and one extra language of your choice\n");
    				printf("Kenku\t\tspeak, read, and write Common and Auran\n");
    				printf("Kobold\t\tspeak, read, and write Common and Draconic\n");
    				printf("Lizardfolk\t\tspeak, read, and write Common and Draconic\n");
    				printf("Orc\t\tspeak, read, and write Common and Orc\n");
    				printf("Tabaxi\t\tspeak, read, and write Common and one other language of your choice\n");
    				printf("Tiefling\t\tspeak, read, and write Common and Infernal\n");
    				printf("Tiefling, Abyssal\t\tspeak, read, and write Common and Abyssal\n");
    				printf("Tiefling, Infernal\t\tspeak, read, and write Common and Infernal\n");
    				printf("Triton\t\tspeak, read, and write Common and Primordial\n");
    				printf("Yuan-ti Pureblood\tspeak, read, and write Common, Abyssal, and Draconic\n");
    				break;
    			}
    			case 5: {
    				printf("Aarakocra\t\tTalons - Proficient in unarmed strikes and strikes deal 1d4 slashing damage on a hit\n");
    				printf("Aasimar, all\t\tCelestial Resistance - You have resistance to necrotic and radiant damage\n");
    				printf("Aasimar, all\t\tHealing Hands: heal for HP equal to your level | cost: action| range: touch| recharge: long rest\n");
    				printf("Aasimar, Protector\t\tRadiant Soul - gain 30 ft flight speed and add radiant damage to attack or spell\n");
    				printf("\tequal to level | duration: 1 min | learned : level 3 | recharge : long rest\n");
    				printf("Aasimar, Scourge\t\tRadiant Consumption - shed bright light for 10ft, dim light for additional 10 ft and\n");
    				printf("\tall creatures within 10 ft take radiant damage equal to your level and attacks\n");
    				printf("\tdeal radiant damage equal to your level | duration: 1 min");
    				printf("\tlearned: level 3 | recharge : long rest\n");
    				printf("Aasimar, Fallen\t\tNecrotic Shroud - other creatures within 10 ft must make a charisma save of DC 8 plus\n");
    				printf("\tyour proficiency mod plus your charisma mod on a fail creatures become frightened of you\n");
    				printf("\tuntil the end of your next turn and attacks deal additional necrotic damage equal to your level\n");
    				printf("\tduration: 1 min | learned: level 3 | recharge : long rest\n");
    				printf("Bugbear\t\tLong-Limbed - when you make a melee attack on your turn, your reach is 5ft greater than normal\n");
    				printf("Bugbear\t\tPowerful Build - you count as large when determining your carrying capacity and weight you can move\n");
    				printf("Bugbear\t\tSneaky - you are proficient in stealth\n");
    				printf("Bugbear\t\tSuprise Attack - if you suprise a creature and hit it on your first turn you deal an extra 2d6 damage\n");
    				printf("\trecharge after combat ends\n");
    				printf("Changeling\t\tDuplicity - you gain proficiency in the deception skill\n");
    				printf("Changeling\t\tShapeshifter - polymorph into any humanoid of your size that you have seen your equipment does not\n");
    				printf("\tchange with you if you die your revert | cost: action\n");
    				printf("Dragonborn\t\tDraconic Ancestry - you have draconic ancestry choose one type from the table on page 34 of the \n");
    				printf("\tPlayer's Handbook\n");
    				printf("Dragonborn\t\tBreath Weapon - You choose to exhale destructive energy the shape and damage type is determined \n");
    				printf("\tby your chosen ancestry creatures in the target area must make a saving throw the DC and type is\n");
    				printf("\tdetermined by your ancestry the damage is 2d6-5d6 depending on your level| recharges: short rest\n");
    				printf("Dragonborn\t\tDamage Resistance - you have resistance to the damage type associated with your Draconic Ancestry\n");
    				printf("Dwarf, all\t\tDwarvan Resistance - you have advantage on saving throws against poison and resistance to poison damage\n");
    				printf("Dwarf, all\t\tDwarvan Combat Training - you have proficiency with the battleaxe, handaxe, throwing hammer, and warhammer\n");
    				printf("Dwarf, all\t\tTool Proficiency - you gain proficiency with the artisan's tools of your choice: smith's, brewer's, or mason's tools");
    				printf("Dwarf, all\t\tStonecunning - you are proficient in history checks to determine the origin of stonework and you\n");
    				printf("\tadd double your proficiency bonus to the check\n");
    				printf("Dwarf, Gray\t\tDuergar Resilience - you have advantage on saving throws against illusions and being charmed or paralyzed\n");
    				printf("Dwarf, Gray\t\tSunlight Sensitivity - you have disadvantage on attack rolls and on wisdom (perception)\n");
    				printf("\tchecks that rely on sight when you, your target, or what you are trying to see is in direct sunlight\n");
    				printf("Dwarf, Gold\t\tDwarven Toughness - your hit point maximum increases by 1 per level\n");
    				printf("Dwarf, Hill\t\tDwarven Toughness - your hit point maximum increases by 1 per level\n");
    				printf("Dwarf, Mountain\t\tDwarven Armor Training - you have proficiency with light and medium armor\n");
    				printf("Dwarf, Shield\t\tDwarven Armor Training - you have proficiency with light and medium armor\n");
    				printf("Elf, all\t\tKeen Senses - you have proficiency in perception\n");
    				printf("Elf, all\t\tFey Ancestries - you have advantage on saving throws against being charmed and you cannot be put to sleep by\n");
    				printf("\tnon-magical means\n");
    				printf("Elf, all\t\tTrance - you don't sleep, instead you meditate for four hours a day to gain a long rest\n");
    				printf("Gnome, Deep\t\tGnome Cumming - you have advantage on all intelligence, wisdom, and charisma saving throws against magic\n");
    				printf("Elf, Dark\t\tDrow Weapon Training - you have proficiency with rapiers, shortswords, and hand crossbows\n");
    				printf("Elf, Dark\t\tSunlight Sensitivity -: you have disadvantage on attack rolls and on wisdom (perception) \n");
    				printf("\tchecks that rely on sight twhen you, your target, or what you are trying to see is in direct sunlight\n");
    				printf("Elf, High\t\tElf Weapon Training - you have proficiency with the longsword, shortsword, shortbow, and longbow\n");
    				printf("Elf, High\t\tExtra Language - you can speak, read, and write one extra language of your choice\n");
    				printf("Firbolg\t\tHidden Step - you can magically become invisible until the start of your next turn or until you attack\n");
    				printf("\tmake a damage roll or force someone to make a saving throw | recharge: short rest\n");
    				printf("Firbolg\t\tPowerful Build - you count as large when determining your carrying capacity and weigh you can move\n");
    				printf("Firbolg\t\tSpeach of Beast and Leaf - you can speak to beasts and plants but cannot understand them\n");
    				printf("Genasi, Air\t\tUnending Breath - you can hold your breath indefinitely unless you are incapacitated\n");
    				printf("Genasi, Earth\t\tEarth Walk - you can move across difficult terrain made of earth at normal speed\n");
    				printf("Genasi, Fire\t\tDarkvision - your ties to the Elemental Plane of Fire makes your dark vision unusual\n");
    				printf("\teverything you see in darkness is in a shade of red\n");
    				printf("Genasi, Fire\t\tFire Resistance - you have resistance to fire\n");
    				printf("Genasi, Water\t\tAcid Resistance - you have resistance to acid\n");
    				printf("Genasi, Water\t\tAmphibious - you can breathe in air and water\n");
    				printf("Gnome, all\t\tGnome Cunning - you have advantage on all intelligence, wisdom, and charisma saving throws\n");
    				printf("\tagainst magic\n");
    				printf("Gnome, Forest\t\tSpeak with Small Animals - you can can communicate simple ideas with small or smaller beasts\n");
    				printf("Gnome, Rock\t\tArticifer's Lore - you can add double your proficiency bonus to history checks related to magic items\n");
    				printf("\talchemical items, or technological devices\n");
    				printf("Gnome, Rock\t\tTinker - you are proficient with tinker tools you can construct a tiny clockwork device according\n");
    				printf("\tto the rules in page 37 of the Player's Handbook\n");
    				printf("Gnome, Svirfneblin\t\tStone Camouflage - you have advantage on stealth checks to hide in rocky terrain");
    				printf("Goblin\t\tFury of the Small - when you damage a medium sized creature with a spell or attack you can\n");
    				printf("\tyou can deal additional damage equal to your level | recharges: short rest\n");
    				printf("Goblin\t\tNimble Escape - you can take the disengage or hide action as a bonus action\n");
    				printf("Goliath\t\tMountain Born - you are acclimated to high elevations and cold climates including above 20k feet\n");
    				printf("\tsee Dungeon Master's Guid chapter 5 for more information\n");
    				printf("Goliath\t\tNatural Athlete - you have proficiency in athletics\n");
    				printf("Goliath\t\tPowerful Build - you count as large when determining your carrying capacity and weigh you can move\n");
    				printf("Goliath\t\tStone's Endurance - when you take damage you can use your reaction to reduce the damage by\n");
    				printf("\t1d12 plus constitution modifier | recharges: short rest");
    				printf("Halfling\t\tBrave - you have advantage on saving throws against being frightened\n");
    				printf("Halfling\t\tHalfling Nimbleness - you can move through the space of a creature larger than you\n");
    				printf("Halfling\t\tLucky - when you roll a 1 on an attack, ability, or saving throw you can re-roll once\n");
    				printf("Halfling, Lightfoot\t\tNaturally Stealthy - you can attempt to hide even when only obscured by\n");
    				printf("\ta creature larger than you\n");
    				printf("Halfling, Stout\t\tStout Resilience - you have advantage on saving throws against being poisoned and \n");
    				printf("\tresistance to poison\n");
    				printf("Half-Elf\t\tFey Ancestry - you have advantage on saving throws against being charmed and you cannot be put to sleep by\n");
    				printf("\tnon-magical means\n");
    				printf("Half-Elf\t\tSkill Versatility - you gain proficiencies in two skills of your choice\n");
    				printf("Half-Orc\t\tMenacing - you are proficient in intimidation\n");
    				printf("Half-Orc\t\tRelentless Endurance - when reduced to 0HP but not killed you may drop to 1 HP instead\n");
    				printf("\trecharges: long rest\n");
    				printf("Half-Orc\t\tSavage Attacks - when you score a critical hit with a melee weapon you can roll on of\n");
    				printf("\tweapon's damage dice one additional time\n");
    				printf("Hobgoblin\t\tMartial Training - you are proficient with two martial weapons of your choice and\n");
    				printf("\tlight armor\n");
    				printf("Hobgoblin\t\tSaving Face - if you miss with an attack roll, ability check, or saving throw you gain a\n");
    				printf("\tbonus to that roll equal the number of allies you can see within 30 ft (max 5) | recharges: short rest\n");
    				printf("Human, Variant\t\tFeat - you gain one feat of your choice at level 1\n");
    				printf("Kenku\t\tExert Forgery - you have advantage on forgery related checks\n");
    				printf("Kenku\t\tKenku Training - you are proficient with two of the following skills of your choice\n");
    				printf("\tacrobatics, deception, stealth, and sleight of hand\n");
    				printf("Kenku\t\tMimicry - you can attempt to mimic sounds you have heard including voices a creature\n");
    				printf("\tcan determine they are imitations with a successful insight check against your deception check\n");
    				printf("Kobold\t\tGrovel, Cower, and Beg - cower to distract foes allies gain advantage on enemies within\n");
    				printf("\t10 ft of you who can see you | cost: action | recharge | short rest\n");
    				printf("Kobold\t\tPack Tactics - you have attack rolls against a creature when an ally is within 5 ft of \n");
    				printf("\tthat enemy and not incapacitated\n");
    				printf("Kobold\t\tSunlight Sensitivity - you have disadvantage on attack rolls and on wisdom (perception)\n");
    				printf("\tchecks that rely on sight when you, your target, or what you are trying to see is in direct sunlight\n");
    				printf("Lizardfolk\t\tBite - bite for 1d6 piercing damage + strength mod on a successful hit\n");
    				printf("Lizardfolk\t\tCunning Artisan - during a short rest, you can harvest bone and hide from a slain beast,\n");
    				printf("\tconstruct, dragon, monstrosity, or plant creature of size small or larger to create a shield, club,\n");
    				printf("\tjavelin, or 1d4 darts or needles | requires a dagger or appropriate tool set\n");
    				printf("Lizardfolk\t\tHold Breath - you can hold your breath for up to 15 minutes\n");
    				printf("Lizardfolk\t\tHunter's Lore - you gain proficiency with two of the following skills of your choice\n");
    				printf("\tanimal handling, nature, perception, stealth, and survival\n");
    				printf("Lizardfolk\t\tNatural Armor - while not wearing armor, your armor rating is 13 plus your dexterity modifier\n");
    				printf("Lizardfolk\t\tHungry Jaws - in battle you can bite an enemy with a bonus action if you hit you gain temporary\n");
    				printf("\tHP equal to your constitution modifier (minimum of 1) | cost: bonus action | recharges: short rest\n");
    				printf("Orc\t\tAgressive - move up to 30 ft as a bonus action towards an enemy you can see or hear | cost bonus action\n");
    				printf("Orc\t\tMenacing - you are proficient in the intimidation skill\n");
    				printf("Orc\t\tPowerful Build - you count as large when determining your carrying capacity and weight you can move\n");
    				printf("Tabaxi\t\tFeline Agility - when you move during combat you can double your speed until the end of your turn\n");
    				printf("\trecharges: when you move 0 ft on a turn\n");
    				printf("Tabaxi\t\tCat's Claws - you have a climbing speed of 20 ft and you can deal 1d4 + strength modifier on a \n");
    				printf("\tsucccessful hit\n");
    				printf("Tiefling\t\tHellish Resistance - you have resistance to fire damage\n");
    				printf("Tiefling, Abyssal\t\tAbyssal Fortitude - your maximum HP increase by 1/2 your level (minimum 1)\n");
    				printf("Tiefling, Infernal\t\tHellish Resistance - you have resistance to fire damage\n");
    				printf("Triton\t\tAmphibious - you can breathe in air and water\n");
    				printf("Triton\t\tGuardian of the Depths - resistance to cold damage and ignore drawbacks from deep and underwater environments\n");
    				printf("Triton\t\tEmissary of the Sea - you can communicate simple ideas with beasts who breathe water but\n");
    				printf("\tno way to understand them\n");
    				printf("Yuan-ti Pureblood\tMagic Resistance - you have advantage against saving throws against spells and other magical\n");
    				printf("\taffects\n");
    				printf("Yuan-ti Pureblood\tPoison Immunity - you are immune to poison damage and the poisoned condition\n");
    				printf("Revenant (subclass), all\t\tRelentless Nature : Your DM assigns a specific achievable goal and you \ngain the following abilities until you complete this goal\n");
    				printf("\t\t* If you are below half health when you start your turn, you regain 1 hp\n");
    				printf("\t\t* You lose all ability scores from your race and gain a +1 to constitution\n");
    				printf("Revenant (subclass), human,\t\tchoose two ability scores to increase and if you are human, variant you lose the feat and skills from variance\n");
    				printf("\t\t* if you die, you return 24 hours later if your body is destroyed you reform within 1 mile. You do not regain equipment destroyed");
    				break;
    			}
    			case 6: {
    				printf("Aarakocra\t\tElemental Evil Player's Companion page 3\n");
    				printf("Aasimar\t\tVolo's Guide to Monsters page 104\n");
    				printf("Bugbear\t\tVolo's Guide to Monsters page 119\n");
    				printf("Changeling\t\tCodex: Unearthed Arcana page 3\n");
    				printf("Dragonborn\t\tPlayer's Handbook page 34\n");
    				printf("Dwarf\t\tPlayer's Handbook page 18\n");
    				printf("Elf\t\tPlayer's Handbook page 23\n");
    				printf("Firbolg\t\tVolo's Guide to Monsters page 107\n");
    				printf("Genasi\t\tElemental Evil Player's Companion page 3\n");
    				printf("Gnome\t\tPlayer's Handbook page 17\n");
    				printf("Gnome, Deep\t\tElemental Evil Player's Companion page 7\n");
    				printf("Goblin\t\tVolo's Guide to Monsters page 104\n");
    				printf("Goliath\t\tElemental Evil Player's Companion page 3 and Volo's Guide to Monsters page 108\n");
    				printf("Halfling\t\tPlayer's Handbook page 36\n");
    				printf("Half-Elf\t\tPlayer's Handbook page 38\n");
    				printf("Half-Orc\t\tPlayer's Handbook page 40\n");
    				printf("Hobgoblin\t\tVolo's Guide to Monsters page 109\n");
    				printf("Human\t\tPlayer's Handbook page 29\n");
    				printf("Human, Variant\t\tPlayer's Handbook page 29\n");
    				printf("Kenku\t\tVolo's Guide to Monsters page 109\n");
    				printf("Kobold\t\tVolo's Guide to Monsters page 119\n");
    				printf("Lizardfolk\t\tVolo's Guide to Monsters page 112\n");
    				printf("Orc\t\tVolo's Guide to Monsters page 120\n");
    				printf("Tabaxi\t\tVolo's Guide to Monsters page 115\n");
    				printf("Tiefling\t\tPlayer's Handbook page 42\n");
    				printf("Tiefling, Abyssal\t\tCodex: Unearthed Arcana page 10\n");
    				printf("Tiefling, Infernal\t\tCodex: Unearthed Arcana page 10\n");
    				printf("Triton\t\tVolo's Guide to Monsters page 117\n");
    				printf("Yuan-ti Pureblood\t\tVolo's Guide to Monsters page 120\n");
    				break; } //need to update this
    			case 7: {break; } // end case 7 user is ready
			} //end switch(get_int(1, 7);)
		}// end if user asks for more info
    		switch (choice_race) {
    			case 1:{
    				strcpy(myrace, "Aarakocra");
    				strcpy(mysubrace, "none");
    				choice_race = 0;
    				choice_made = true;
    			break;
    			case 2: {
    				printf("The Aasimar has the following sub races select one:\n");
    				printf("1.\tFallen Aasimar\n2.\tProtector Aasimar\n3.\tScourge Aasimar\n4.\tRevenant\n5.\tgo back\n");
    				choice_sub = get_int(1, 5);
    				if (choice_sub != 5){
    				    strcpy(myrace, "Aasimar");
    					choice_made = true;
    					switch (choice_sub) {
    						case 1: 
    							strcpy(mysubrace, "Fallen");
    							break; 
    						case 2: 
    							strcpy(mysubrace, "Protector");
    							break; 
    						case 3: 
    							strcpy(mysubrace, "Scourge");
    							break; 
    						case 4: 
    							strcpy(mysubrace, "Revenant");
    							break; 
    					break;}
    				}
    			break;
    			case 3:
    				strcpy(myrace, "Bugbear");
    				strcpy(mysubrace, "none");
    				choice_race = 0;
    				choice_made = true;
    			break;
    			case 4:
    				strcpy(myrace, "Changeling");
    				strcpy(mysubrace, "none");
    				choice_race = 0;
    				choice_made = true;
    			break;
    			case 5:{
    				printf("The Dragonborn has the following ancestries to choose from select one:\n");
    				printf("1.\t Black\n2.\tBlue\n3.\tBrass\n4. Bronze\n5.\tCoppor\n6.\tGold\n7.\tGreen\n8.\tRed\n9.\tSilver\n10.\tWhite\n11.\t*Revenant\n12.\tgo back\n");
    				choice_sub = get_int(1, 12);
    				if(choice_sub !=12){
    				    strcpy(myrace, "Dragonborn");
    					choice_made = true;
    					switch (choice_sub) {
    					case 1:
    						strcpy(mysubrace, "Black");
    						break;
    					case 2:
    						strcpy(mysubrace, "Blue");
    						break;
    					case 3:
    						strcpy(mysubrace, "Brass");
    						break;
    					case 4:
    						strcpy(mysubrace, "Bronze");
    						break;
    					case 5:
    						strcpy(mysubrace, "Coppor");
    						break;
    					case 6:
    						strcpy(mysubrace, "Gold");
    						break;
    					case 7:
    						strcpy(mysubrace, "Green");
    						break;
    					case 8:
    						strcpy(mysubrace, "Red");
    						break;
    					case 9:
    						strcpy(mysubrace, "Silver");
    						break;
    					case 10:
    						strcpy(mysubrace, "White");
    						break;
    					case 11:
    					    strcpy(mysubrace, "Revenant");
    					    break;
    					}
    				}
    			}
    			break;
    			case 6:{
    			    printf("The Dwarf has the following sub-races to choose from select one:\n");
    				printf("1.\t*Gold Dwarf\n2.\tGray Dwarf\n3.\tHill Dwarf\n4. Mountain Dwarf\n5.\t*Shield Dwarf\n6.\t*Revenant\n7.\tgo back\n");
    				choice_sub = get_int(1,7);
    	            if(choice_sub !=7){
    				    strcpy(myrace, "Dwarf");
    					choice_made = true;
    					switch (choice_sub) {
        					case 1:
        						strcpy(mysubrace, "Gold");
        						break;
        					case 2:
        						strcpy(mysubrace, "Gray");
        						break;
        					case 3:
        						strcpy(mysubrace, "Hill");
        						break;
        					case 4:
        						strcpy(mysubrace, "Mountain");
        						break;
        					case 5:
        						strcpy(mysubrace, "Shield");
        						break;
        					case 6:
        						strcpy(mysubrace, "Revenant");
        						break;
    				    break;}
    	           }
    			}
    			case 7: {
    			    printf("The Elf has the following sub-races to choose from select one:\n");
    				printf("1.\tDark Elf (Drow)\n2.\tHigh Elf\n3.\t*Moon Elf\n4.\t*Sun Elf\n5.\tWood Elf\n6.\t*Revenant\n7.\tgo back\n");
    		    	choice_sub = get_int(1,7);
    	            if(choice_sub !=7){
    				    strcpy(myrace, "Elf");
    					choice_made = true;
    					switch (choice_sub) {
        					case 1:
        						strcpy(mysubrace, "Dark");
        						break;
        					case 2:
        						strcpy(mysubrace, "High");
        						break;
        					case 3:
        						strcpy(mysubrace, "Moon");
        						break;
        					case 4:
        						strcpy(mysubrace, "Sun");
        						break;
        					case 5:
        						strcpy(mysubrace, "Wood");
        						break;
        					case 6:
        						strcpy(mysubrace, "Revenant");
        						break;
    				    break;}
    	           }
    			}	
    			case 8:	
    			    strcpy(myrace, "Firbolg");
    				strcpy(mysubrace, "none");
    				choice_race = 0;
    				choice_made = true;
    			break;
    			case 9:{
    			    printf("The Genasi has the following sub-races to choose from select one:\n");
    				printf("1.\tAir Genasi\n2.\tEarth Genasi\n3.\tFire Genasi\n4.\tWater Genasi\n5.\tRevenant\n6.\tgo back\n");
    		    	choice_sub = get_int(1,6);
    	            if(choice_sub !=6){
    				    strcpy(myrace, "Genasi");
    					choice_made = true;
    					switch (choice_sub) {
        					case 1:
        						strcpy(mysubrace, "Air");
        						break;
        					case 2:
        						strcpy(mysubrace, "Earth");
        						break;
        					case 3:
        						strcpy(mysubrace, "Fire");
        						break;
        					case 4:
        						strcpy(mysubrace, "Water");
        						break;
        					case 5:
        						strcpy(mysubrace, "Revenant");
        						break;
    				    break;}
    	           }
    			}
    			case 10:{
    			    printf("The Gnome has the following sub races to choose from select one:\n");
    				printf("1.\t Deep Gnome\n2.\tForest Gnome\n3.\tRock Gnome\n4.\tSvirfneblin\n5.\tRevenant\n6.\tgo back\n");
    		    	choice_sub = get_int(1,6);
    	            if(choice_sub !=6){
    				    strcpy(myrace, "Gnome");
    					choice_made = true;
    					switch (choice_sub) {
        					case 1:
        						strcpy(mysubrace, "Deep");
        						break;
        					case 2:
        						strcpy(mysubrace, "Forest");
        						break;
        					case 3:
        						strcpy(mysubrace, "Rock");
        						break;
        					case 4:
        						strcpy(mysubrace, "Svirfneblin");
        						break;
        					case 5:
        						strcpy(mysubrace, "Revenant");
        						break;
    				    break;}
    	           }
    			}
    			case 11:
                    strcpy(myrace, "Goblin");
    				strcpy(mysubrace, "none");
    				choice_race = 0;
    				choice_made = true;
    			break;
    			case 12:
    			    strcpy(myrace, "Goliath");
    				strcpy(mysubrace, "none");
    				choice_race = 0;
    				choice_made = true;
    			break;
    			case 13:
    			    strcpy(myrace, "Hobgoblin"); break;
        			strcpy(mysubrace, "none");
    				choice_race = 0;
    				choice_made = true;
    			break;
    			case 14:
        			strcpy(myrace, "Half-Elf");
    				strcpy(mysubrace, "none");
    				choice_race = 0;
    				choice_made = true;
    			break;
    			case 15:{
    			    printf("The Halfling has the following sub races to choose from select one:\n");
    		        puts("Choose between the following");
        			printf("1.\tLightfoot\n2.\tStout\n3.\tStrongheart\n4.\tRevenant\n5.\tgo back\n");
    		    	choice_sub = get_int(1,5);
    	            if(choice_sub !=5){
    				    strcpy(myrace, "Halfling");
    					choice_made = true;
    					switch (choice_sub) {
        					case 1:
        						strcpy(mysubrace, "Lightfoot");
        						break;
        					case 2:
        						strcpy(mysubrace, "Stout");
        						break;
        					case 3:
        						strcpy(mysubrace, "Strongheart");
        						break;
        					case 4:
        						strcpy(mysubrace, "Revenant");
        						break;
        				break;}
    	           }
    			}
    			case 16:
        			strcpy(myrace, "Half-Orc");
        			strcpy(mysubrace, "none");
        			choice_race = 0;
        			choice_made = true;
    			break;
    			case 17:
    			    strcpy(myrace, "Human");
    			    strcpy(mysubrace, "none");
    				choice_race = 0;
    				choice_made = true;
    			break;
    			case 18:
    			    strcpy(myrace, "Human, Variant");
    			    strcpy(mysubrace, "none");
    				choice_race = 0;
    				choice_made = true;
    			break;
    			case 19:
    			    strcpy(myrace, "Kenku");
    			    strcpy(mysubrace, "none");
    				choice_race = 0;
    				choice_made = true;
    			break;
    			case 20:
    			    strcpy(myrace, "Kobold");
    			    strcpy(mysubrace, "none");
    				choice_race = 0;
    				choice_made = true;
    			break;
    			case 21:
    			    strcpy(myrace, "Lizardfolk");
    			    strcpy(mysubrace, "none");
    				choice_race = 0;
    				choice_made = true;
    			break;
    			case 22:
    			    strcpy(myrace, "Minotaur");
    			    strcpy(mysubrace, "none");
    				choice_race = 0;
    				choice_made = true;
    			break;
    			case 23:
    			    strcpy(myrace, "Orc");
    			    strcpy(mysubrace, "none");
    				choice_race = 0;
    				choice_made = true;
    			break;
    			case 24:{
    			    printf("The Shifter has the following sub races to choose from select one:\n");
    		        puts("Choose between the following");
        			printf("1.\tBeasthide\n2.\tCliffwalk\n3.\tLongstride\n4.\tLongtooth\n5.\tRazorclaw\n6.\tRevenant\n7.\tWildhunt\n8.\tgo back\n");
    		    	choice_sub = get_int(1,8);
    	            if(choice_sub !=8){
    				    strcpy(myrace, "Shifter");
    					choice_made = true;
    					switch (choice_sub) {
        					case 1:
        						strcpy(mysubrace, "Beasthide");
        						break;
        					case 2:
        						strcpy(mysubrace, "Cliffalk");
        						break;
        					case 3:
        						strcpy(mysubrace, "Longstride");
        						break;
        					case 4:
        						strcpy(mysubrace, "Longtooth");
        						break;
        					case 5:
        					    strcpy(mysubrace, "Razorclaw");
        					  break;
        					case 6:
        					    strcpy(mysubrace, "Revenant");
        					break;
        					case 7:
        					    strcpy(mysubrace, "Wildhunt");
        					break;
        				break;}
    	           }
    			}
    			case 25:{
    			    printf("The Tiefling has the following sub races to choose from select one:\n");
    		        puts("Choose between the following");
        			printf("1.\tno sub race\n2.\t*Abyssal\n3.\t*Infernal4.\tRevenant\n5.\tgo back\n");
    		    	choice_sub = get_int(1,5);
    	            if(choice_sub !=8){
    				    strcpy(myrace, "Shifter");
    					choice_made = true;
    					switch (choice_sub) {
        					case 1:
        						strcpy(mysubrace, "Beasthide");
        						break;
        					case 2:
        						strcpy(mysubrace, "Cliffalk");
        						break;
        					case 3:
        						strcpy(mysubrace, "Longstride");
        						break;
        					case 4:
        						strcpy(mysubrace, "Longtooth");
        						break;
        					case 5:
        					    strcpy(mysubrace, "Razorclaw");
        					  break;
        					case 6:
        					    strcpy(mysubrace, "Revenant");
        					break;
        					case 7:
        					    strcpy(mysubrace, "Wildhunt");
        					break;
        				break;}
    	           }
    			}
    			break;
    			case 26:
    			    strcpy(myrace, "Teifling");
    			    strcpy(mysubrace, "none");
    				choice_race = 0;
    				choice_made = true;
    			break;
    			case 27: strcpy(myrace, "triton"); break;
    			case 28: strcpy(myrace, "Yuan-ti Pureblood"); break;
    			case 29: strcpy(myrace, "Warforged"); break;
    			case 30: break;
    		}
    	}while (!choice_made);
	return choice_race;
}

int get_Abil_Mods(int stat) {
	switch (stat) {
	case 3:
		return -4;
		break;
	case 4:
	case 5:
		return -3;
		break;
	case 6:
	case 7:
		return -2;
		break;
	case 8:
	case 9:
		return -1;
		break;
	case 10:
	case 11:
		return 0;
		break;
	case 12:
	case 13:
		return 1;
		break;
	case 14:
	case 15:
		return 2;
		break;
	case 16:
	case 17:
		return 3;
		break;
	case 18:
	case 19:
		return 4;
		break;
	case 20:
	case 21:
		return 5;
		break;
	case 22:
	case 23:
		return 6;
		break;
	case 24:
	case 25:
		return 7;
		break;
	}
} //COMPLETE
int four_d_6_drop_lowest() {
	int count, count2;  //used in for loops
	int temp;           //used to sort highest to lowest
	int dice[4];        //stores dice rolls

	for (count = 0; count < 4; count++)
		dice[count] = dice_roll(6); //roll dice for stats

	for (count = 0; count < 4; count++) {
		for (count2 = count + 1; count2 < 4; count2++)
		{
			if (dice[count] < dice[count2])
			{
				temp = dice[count];
				dice[count] = dice[count2];
				dice[count2] = temp;
			}
		}
	}   //loops to sort from highest to lowest

	printf("You rolled: ");
	for (count = 0; count < 4; count++)
		printf("%d ", dice[count]); //displays dice results in order

	printf("After dropping %d, the total is: %d.\n", dice[3], dice[0] + dice[1] + dice[2]); //displays total
	return (dice[0] + dice[1] + dice[2]); //return total
} //COMPLETE

void get_String(char new_string[], char string_type[]) {
	int n, choice;
	char junk;
	do {
		fgets(new_string, SIZE, stdin);
		for (n = 0; n < 50 && new_string[n] != "\0"; n++)
			if (new_string[n] == '\n')
				new_string[n] = '\0';// eliminates the newline character

		printf("You selected %s.", new_string);
		printf("\nUse this for your %s?\n1.\tyes\n2.\tno\n", string_type);
		choice = get_int(1, 2);
		scanf("%c", &junk); //consumes newline
		if (choice == 2)
			printf("Enter your %s again: \n", string_type);

	} while (choice != 1);
} //COMPLETE
void pause() {
	puts("Press [Enter] to continue . . .");
	getchar();
	getchar();
} //COMPLETE
void print_class(int class) {
	switch (class) {
	case 1:
		printf("Class:\tBarbarian\n");
		break;
	case 2:
		printf("Class:\tBard\n");
		break;
	case 3:
		printf("Class:\tCleric\n");
		break;
	case 4:
		printf("Class:\tDruid\n");
		break;
	case 5:
		printf("Class:\tFighter\n");
		break;
	case 6:
		printf("Class:\tMonk\n");
		break;
	case 7:
		printf("Class:\tPaladin\n");
		break;
	case 8:
		printf("Class:\tRanger\n");
		break;
	case 9:
		printf("Class:\tSorcerer\n");
		break;
	case 10:
		printf("Class:\tWarlock\n");
		break;
	case 11:
		printf("Class:\tWizard\n");
		break;
	}
} //modify after adding all classes //modify after adding all races/sub-races
void print_race(int race_int, int sub_race_int) {
	switch (race_int) {
	case 1:
		printf("Race: Aarakocra\nSub Race: N/A\n");
		break;
	case 2:
		printf("Race: Aasimar\n");
		switch (sub_race_int) {
		case 1:
			printf("Sub Race: Protector Aasimar\n");
			break;
		case 2:
			printf("Sub Race: Scourge Aasimar\n");
			break;
		case 3:
			printf("Sub Race: Fallen Aasimar\n");
			break;
		}
		break;
	case 3:
		printf("Race: Bugbear\nSub Race: N/A\n");
		break;
	case 4:
		printf("Race: Dragonborn\n");
		switch (sub_race_int) {
		case 1:
			printf("Sub Race: black\n");
			break;
		case 2:
			printf("Sub Race: Blue\n");
			break;
		case 3:
			printf("Sub Race: Brass\n");
			break;
		case 4:
			printf("Sub Race: Bronze\n");
			break;
		case 5:
			printf("Sub Race: Copper\n");
			break;
		case 6:
			printf("Sub Race: Gold\n");
			break;
		case 7:
			printf("Sub Race: Green\n");
			break;
		case 8:
			printf("Sub Race: Red\n");
			break;
		case 9:
			printf("Sub Race: Silver\n");
			break;
		case 10:
			printf("Sub Race: White\n");
			break;
		}
		break;
	case 5:
		printf("Race: Deep Gnome\nSub Race: N/A\n");
		break;
	case 6:
		printf("Race: Dwarf\n");
		switch (sub_race_int) {
		case 1:
			printf("Sub Race: Hill Dwarf\n");
			break;
		case 2:
			printf("Sub Race: Mountain Dwarf\n");
			break;
		case 3:
			printf("Sub Race: Shield Dwarf\n");
			break;
		case 4:
			printf("Sub Race: Gold Dwarf\n");
			break;
		case 5:
			printf("Sub Race: Gray Dwarf\n");
			break;
		}
		break;
	case 7:
		printf("Race: Elf\n");
		switch (sub_race_int) {
		case 1:
			printf("Sub Race: High-Elf\n");
			break;
		case 2:
			printf("Sub Race : Wood-Elf\n");
			break;
		case 3:
			printf("Sub Race: Dark-Elf (Drow)\n");
			break;
		case 4:
			printf("Sub Race: Moon-Elf\n");
			break;
		case 5:
			printf("Sub Race: Sun-Elf\n");
			break;
		}
		break;
	case 8:
		printf("Race: Firbolg\nSub Race: N/A\n");
		break;
	case 9:
		printf("Race: Genasi\n");
		switch (sub_race_int) {
		case 1:
			printf("Sub Race: Air Genasi\n");
			break;
		case 2:
			printf("Sub Race: Earth Genasi\n");
			break;
		case 3:
			printf("Sub Race: Fire Genasi\n");
			break;
		case 4:
			printf("Sub Race: Water Genasi\n");
			break;
		}
		break;
	case 10:
		printf("Race: Gnome\n");
		switch (sub_race_int) {
		case 1:
			printf("Sub Race: Forest Gnome\n");
			break;
		case 2:
			printf("Sub Race: Rock Gnome\n");
			break;
		case 3:
			printf("Sub Race: Deep Gnome\n");
			break;
		case 4:
			printf("Sub Race: Svirfneblin\n");
			break;
		}
		break;
	case 11:
		printf("Race: Goblin\nSub Race: N/A\n");
		break;
	case 12:
		printf("Race: Goliath\nSub Race: N/A\n");
		break;
	case 13:
		printf("Race: Hobgoblin\nSub Race: N/A\n");
		break;
	case 14:
		printf("Race: Half-Elf\nSub Race: N/A\n");
		break;
	case 15:
		printf("Race: Halfling\n");
		switch (sub_race_int) {
		case 1:
			printf("Sub Race: Stout\n");
			break;
		case 2:
			printf("Sub Race: Lightfoot\n");
			break;
		case 3:
			printf("Sub Race: Strongheart\n");
			break;
		}
		break;
	case 16:
		printf("Race: Half-Orc\nSub Race: N/A\n");
		break;
	case 17:
		printf("Race: Human\nSub Race: N/A\n");
		break;
	case 18:
		printf("Race: Kenku\nSub Race: N/A\n");
		break;
	case 19:
		printf("Race: Kobold\nSub Race: N/A\n");
		break;
	case 20:
		printf("Race: Lizardfolk\nSub Race: N/A\n");
		break;
	case 21:
		printf("Race: Orc\nSub Race: N/A\n");
		break;
	case 22:
		printf("Race: Tabaxi\nSub Race: N/A\n");
		break;
	case 23:
		printf("Race: Tiefling\nSub Race: N/A\n");
		break;
	case 24:
		printf("Race: Triton\nSub Race: N/A\n");;
		break;
	case 25:
		printf("Race: Yuan-Ti Pureblood\nSub Race: N/A\n");
		break;
	}
} //modify after adding all races and sub races
void sort_array(int arr_size, int arr[6]) {
	int count, count2, temp;
	for (count = 0; count < arr_size; count++)
		for (count2 = count + 1; count2 < arr_size; count2++)
			if (arr[count] < arr[count2]) {
				temp = arr[count];
				arr[count] = arr[count2];
				arr[count2] = temp;
			}
} //COMPLETE
